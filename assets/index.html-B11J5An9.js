import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as s,c,b as p,d as n,a as i,w as a,f as d,e as l}from"./app-BrScejxt.js";const r="/assets/Java集合体系-Badb61TL.png",u="/assets/HashMap的put流程-B48043qs.png",h="/assets/偏向锁、轻量级锁、重量级锁三种形式-BewI_Dpi.png",k="/assets/不建议用Executors创建线程池-CBk_p2iC.png",v="/assets/ES数据批量导入-DMjALP-q.png",m="/assets/多个查询结果汇总-UUMbLyd6.png",g="/assets/JWT登录实现-BdTPz6oy.png",b="/assets/JWT登录流程-CRS-AdDe.png",f="/assets/日志采集-CtQj2JE7.png",q="/assets/ELK日志采集-DPwn00df.png",_="/assets/火焰图-D9asOONH.png",y={},j=n("p",null,"此处是一些 Java 高频面试题（持续更新中...）。",-1),J=n("h2",{id:"目录",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#目录"},[n("span",null,"目录")])],-1),L=n("h3",{id:"基础",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#基础"},[n("span",null,"基础")])],-1),w=n("h3",{id:"集合",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#集合"},[n("span",null,"集合")])],-1),T=n("h3",{id:"并发编程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#并发编程"},[n("span",null,"并发编程")])],-1),D=n("h3",{id:"io",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#io"},[n("span",null,"IO")])],-1),x=n("h3",{id:"jvm",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jvm"},[n("span",null,"JVM")])],-1),C=n("h3",{id:"新特性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#新特性"},[n("span",null,"新特性")])],-1),A=d('<h2 id="面试题汇总" tabindex="-1"><a class="header-anchor" href="#面试题汇总"><span>面试题汇总</span></a></h2><h3 id="常见集合面试题" tabindex="-1"><a class="header-anchor" href="#常见集合面试题"><span>常见集合面试题</span></a></h3><div class="hint-container info"><p class="hint-container-title">Java 集合体系。</p><blockquote><p><img src="'+r+'" alt="Java集合体系" loading="lazy"></p></blockquote></div><div class="hint-container info"><p class="hint-container-title">ArrayList 底层的数据结构和扩容的机制。</p><blockquote><p>每次扩容是原来的 1.5 倍。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">如何实现数组和 List 之间的转换？</p><blockquote><p>数组转 List：<code>Arrays.asList(T... a)</code>。</p><ul><li>如果修改了原数组的内容，会影响转换后的 List。</li><li>使用的是 Arrays 类内部的一个 ArrayList 来构建的集合。</li></ul><p>List 转数组：<code>List.toArray()</code> - 不影响原 List。</p><ul><li>如果修改的原 List 的内容，不会影响转换后的数组。</li><li>底层进行了数组的拷贝。</li></ul></blockquote></div><div class="hint-container info"><p class="hint-container-title">ArrayList 和 LinkedList 的区别是什么？</p><blockquote><p><strong>从几个方面回答</strong>：</p><ul><li>底层数据结构：动态数组、双向链表的不同特点。</li><li>操作效率。</li><li>占用的内存空间（数组需要连续的内存空间、链表不需要）。</li><li>线程是否安全：ArrayList 和 LinkedList 都不是线程安全的类。</li></ul></blockquote></div><div class="hint-container info"><p class="hint-container-title">HashMap 相关面试题。</p><blockquote><p>底层数据结构：</p><ul><li>JDK 1.7：数组 + 链表（采用的是拉链法）。</li><li>JDK 1.8：数组 + 链表 + 红黑树。</li></ul><p>名词：哈希碰撞、拉链法、头插法（JDK 1.7）、扰动算法、加载因子（0.75）。</p><p>树化：链表的长度大于 8 且数组的长度大于 64 则链表转化为红黑树（默认数组长度为 16）。</p><p>退化：红黑树拆分成的树的节点数小于等于临界值 6 时则退化为链表。</p><p><strong>HashMap 的 <code>put</code> 流程</strong>：</p><p><img src="'+u+'" alt="HashMap 的put流程" loading="lazy"></p><p><strong>文字描述 <code>put</code> 的流程</strong>：</p><ol><li>判断键值对数组 <code>table</code> 是否为空或为 <code>null</code>，否则执行 <code>resize()</code> 方法进行扩容（初始化）。</li><li>根据键值 <code>key</code> 计算 <code>hash</code> 值得到数组索引。</li><li>判断 <code>table[i]==null</code>，条件成立，直接新建节点添加。</li><li>如果 <code>table[i]==null</code>，不成立： <ol><li>判断 <code>table[i]</code> 的首个元素是否和 <code>key</code> 一样，如果相同直接覆盖 <code>value</code>。</li><li>判断 <code>table[i]</code> 是否为 <code>treeNode</code>，即 <code>table[i]</code> 是否是红黑树，如果是红黑树，则直接在树中插入键值对。</li><li>遍历 <code>table[i]</code>，链表的尾部插入数据，然后判断链表长度是否大于 8，大于 8 的话把链表转换为红黑树，在红黑树中执行插入操作，遍历过程中若发现 <code>key</code> 已经存在直接覆盖 <code>value</code>。</li></ol></li><li>插入成功后，判断实际存在的键值对数量 <code>size</code> 是否超多了最大容量 <code>threshold</code>（数组长度 * 0.75），如果超过，进行扩容。</li></ol><p><strong>HashMap 的寻址算法</strong>：</p></blockquote></div><h3 id="多线程面试题" tabindex="-1"><a class="header-anchor" href="#多线程面试题"><span>多线程面试题</span></a></h3><div class="hint-container info"><p class="hint-container-title">线程和进程的区别？</p></div><div class="hint-container info"><p class="hint-container-title">并行和并发有什么区别？</p><blockquote><p>并发（单核 CPU）：同一时间应对多件事情的能力。</p><p>并行（多核 CPU）：同一时间动手做多件事情的能力。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">创建线程的方式有哪些？</p><blockquote><p>四种（包括线程池）：</p><ul><li>继承 <code>Thread</code> 类。</li><li>实现 <code>Runnable</code> 接口。</li><li>实现 <code>Callable</code> 接口（结合 <code>FutureTask</code> 可获取异步执行的结果、可抛出异常）。</li><li>线程池创建线程。</li></ul></blockquote></div><div class="hint-container info"><p class="hint-container-title">Runnable 和 Callable 有什么区别？</p><blockquote><p>Runnable 接口 <code>run()</code> 方法没有返回值。</p><p>Callable 接口 <code>call()</code> 方法有返回值，是个泛型，和 Future、FutureTask 配合可以用来获取异步执行的结果。</p><p>Callable 接口的 <code>call()</code> 方法允许抛出异常，而 Runnable 接口的 <code>run()</code> 方法的异常只能在内部消化，不能继续上抛。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">调用 run() 方法和 start() 方法有什么区别？</p><blockquote><p><code>start()</code>：用来启动线程（只能调用一次）。</p><p><code>run()</code>：封装了要被线程执行的代码（可以被调用多次）。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">线程包括哪些状态？状态之间是如何变化的？</p><blockquote><p>见“并发编程”章节。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">如何保证多个线程按照指定的顺序执行？</p><blockquote><p><code>Thread.join()</code> 方法。</p><p>作用：等待当前调用 <code>join()</code> 方法的这个线程结束。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">notify() 和 notifyAll() 有什么区别？</p><blockquote><p><code>notify()</code>：随机唤醒一个 <code>wait()</code>、<code>wait(long)</code> 的线程。</p><p><code>notifyAll()</code>：唤醒全部 <code>wait()</code>、<code>wait(long)</code> 的线程。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">wait 方法和 sleep 方法的不同？</p><blockquote><p>见“并发编程”章节。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">如何停止一个正在运行的线程？</p><blockquote><p>有三种方式可以停止线程：</p><ul><li>使用退出标志，使线程正常退出，也就是当 <code>run()</code> 方法完成后线程终止。</li><li>使用 <code>stop()</code> 方法强行终止（不推荐 - 方法已作废）。</li><li>使用 <code>interrupt()</code> 方法中断线程： <ul><li>打断阻塞的线程（<code>sleep</code>、<code>wait</code>、<code>join</code>）的线程会抛出 <code>InterruptedException</code> 异常。</li><li>打断正常运行的线程，可以根据打断状态来标记是否退出线程 <code>Thread.currentThread().isInterrupted()</code>。</li></ul></li></ul></blockquote></div><div class="hint-container info"><p class="hint-container-title">synchronized 关键字的底层原理。</p><blockquote><p>Monitor 属性：</p><ul><li>WaitSet - 关联调用了 <code>wait()</code>、<code>wait(long)</code>、<code>sleep()</code> 方法的线程（处于 Waiting 状态的线程）。</li><li>EntryList - 关联没有抢到锁的线程（处于 Blocked 状态的线程）。</li><li>Owner - 存储当前获取锁的线程（只能有一个线程可以获取）。</li></ul><p>见“并发编程”章节。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">Monitor 实现的锁属于重量级锁？你了解过锁升级吗？</p><blockquote><p>Monitor 实现的锁属于重量级锁：里面涉及到了用户态和内核态的切换、进程的上下文切换，成本较高，性能比较低。</p><p>在 JDK 1.6 引入了两种新型锁机制：偏向锁和轻量级锁，它们的引入是为了解决在没有多线程竞争或基本没有竞争的场景下因使用传统锁机制带来的性能开销问题。</p><p><img src="'+h+`" alt="偏向锁、轻量级锁、重量级锁三种形式" loading="lazy"></p><p><mark>一旦锁发生了竞争，都会升级为重量级锁</mark>。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">谈谈 JMM（Java内存模型）。</p><blockquote><p>JMM（Java Memory Model）Java 内存模型，定义了<mark>共享内存</mark>中<mark>多线程程序读写操作</mark>的行为规范，通过这些规则来规范对内存的读写操作从而保证指令的正确性。</p><p>JMM 把内存分为两块：一块是私有线程的工作区域（工作内存）、一块是所有线程的共享区域（主内存）。</p><p>线程跟线程之间是相互隔离，线程跟线程交互需要通过主内存。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">CAS 你知道吗？</p></div><div class="hint-container info"><p class="hint-container-title">乐观锁和悲观锁。</p></div><div class="hint-container info"><p class="hint-container-title">谈谈你对 volatile 的理解。</p><blockquote><p><strong>保证线程间的可见性</strong>：用 <code>volatile</code> 关键字修饰共享变量，能够防止编译器等优化发生，让一个线程对共享变量的修改对另一个线程可见。</p><p><strong>禁止进行指令重排序</strong>：用 <code>volatile</code> 修饰共享变量会在读、写共享变量时加入不同的屏障，阻止其他读写操作越过屏障，从而达到阻止重排序的效果。</p><p>见“并发编程”章节。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">什么是AQS ？</p></div><div class="hint-container info"><p class="hint-container-title">ReentrantLock。</p><blockquote><p>ReentrantLock 翻译过来是可重入锁，相对于 synchronized 它具备以下特点：</p><ul><li>可中断。</li><li>可以设置超时时间。</li><li>可以设置公平锁。</li><li>支持多个条件变量。</li><li>与 synchronized 一样都支持重入。</li></ul></blockquote></div><div class="hint-container info"><p class="hint-container-title">synchronized 和 Lock 有什么区别？</p><blockquote><p>见“并发编程”章节。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">死锁产生的条件是什么？</p><blockquote><p>一个线程需要同时获取多把锁。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">如何进行死锁诊断？</p><blockquote><p>jps（查看进程 ID）、jstack（查看 Java 进程内线程的堆栈信息）。</p><p>可视化工具：jconsole、VisualVM。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">ConcurrentHashMap。</p><blockquote><p>见“并发编程”章节。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">Java 并发编程三大特性。</p><blockquote><p>原子性：加锁来保证原子性（<code>synchronized</code>、<code>Lock</code>）。</p><p>可见性：使用 <code>volatile</code> 关键字和 <code>synchronized</code>、<code>Lock</code> 保证可见性。</p><p>有序性：使用 <code>volatile</code> 关键字保证有序性。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">线程池的核心参数有哪些？</p><blockquote><p>参数最多的有 7 个：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>
  <span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>
  <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>
  <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>
  <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>
  <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">,</span>
  <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span>
  <span class="token class-name">RejectedExecutionHandler</span> handler
<span class="token punctuation">)</span>
</code></pre></div><ul><li>corePoolSize 核心线程数目。</li><li>maximumPoolSize 最大线程数目 = (核心线程+救急线程的最大数目)。</li><li>keepAliveTime 生存时间 - 救急线程的生存时间，生存时间内没有新任务，此线程资源会释放。</li><li>unit 时间单位 - 救急线程的生存时间单位，如秒、毫秒等。</li><li>workQueue - 当没有空闲核心线程时，新来任务会加入到此队列排队，队列满会创建救急线程执行任务。 <ul><li>ArrayBlockingQueue：基于数组结构的有界阻塞队列，FIFO。</li><li>LinkedBlockingQueue：基于链表结构的有界阻塞队列，FIFO。</li><li>DelayedWorkQueue ：是一个优先级队列，它可以保证每次出队的任务都是当前队列中执行时间最靠前的。</li><li>SynchronousQueue：不存储元素的阻塞队列，每个插入操作都必须等待一个移出操作。</li></ul></li><li>threadFactory 线程工厂 - 可以定制线程对象的创建，例如设置线程名字、是否是守护线程等。</li><li>handler 拒绝策略 - 当所有线程都在繁忙，workQueue 也放满时，会触发拒绝策略。 <ul><li>AbortPolicy：直接抛出异常，默认策略。</li><li>CallerRunsPolicy：用调用者所在的线程来执行任务。</li><li>DiscardOldestPolicy：丢弃阻塞队列中靠最前的任务，并执行当前任务。</li><li>DiscardPolicy：直接丢弃任务。</li></ul></li></ul><p><strong>如何确定核心线程数？</strong></p><p>IO 密集型任务：文件读写、DB 读写、网络请求等，核心线程数大小设置为：</p><ul><li>高并发场景：CPU 核数 + 1。</li><li>并发不高、任务执行时间长：CPU 核数 * 2 + 1。</li></ul><p>CPU 密集型任务：计算型代码、Bitmap 转换、Gson 转换等，核心线程数大小设置为：CPU 核数 + 1。</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 查看机器的 CPU 核数</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>查看机器的 CPU 核数。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">线程池的种类有哪些？</p><blockquote><p>newFixedThreadPool：创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</p><p>newSingleThreadExecutor：创建一个单线程化的线程池，它只会用唯一的工作线程来执行任 务，保证所有任务按照指定顺序(FIFO)执行。</p><p>newCachedThreadPool：创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</p><p>newScheduledThreadPool：可以执行延迟任务的线程池，支持定时及周期性任务执行。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">为什么不建议用 Executors 创建线程池？</p><blockquote><p><img src="`+k+'" alt="不建议用Executors创建线程池" loading="lazy"></p></blockquote></div><div class="hint-container info"><p class="hint-container-title">线程池使用场景。</p><blockquote><p><strong>ES 数据批量导入</strong>：</p><p><img src="'+v+'" alt="ES数据批量导入" loading="lazy"></p><p><strong>多个查询结果汇总</strong>：</p><p><img src="'+m+'" alt="多个查询结果汇总" loading="lazy"></p><p><strong>你们项目哪里用到了多线程？</strong></p><ul><li>批量导入：使用了线程池 + CountDownLatch 批量把数据库中的数据导入到了 ES 中，避免 OOM。</li><li>数据汇总：调用多个接口来汇总数据，如果所有接口（或部分接口）的没有依赖关系，就可以使用线程池 + future 来提升性能。</li><li>异步线程（线程池）：为了避免下一级方法影响上一级方法（性能考虑），可使用异步线程调用下一个方法（不需要下一级方法返回值），可以提升方法响应时间。</li></ul></blockquote></div><div class="hint-container info"><p class="hint-container-title">ThreadLocal。</p><blockquote><p>见“并发编程”章节。</p></blockquote></div><h3 id="场景面试题" tabindex="-1"><a class="header-anchor" href="#场景面试题"><span>场景面试题</span></a></h3><div class="hint-container info"><p class="hint-container-title">单点登录这块怎么实现的？</p><blockquote><p>单点登录的英文名叫做：Single Sign On（简称SSO），只需要登录一次，就可以访问所有信任的应用系统。</p><p>单点登录解决方案：</p><ul><li><mark>JWT</mark>。</li><li>Oauth2。</li><li>CAS。</li><li>...。</li></ul><p><strong>JWT 登录实现</strong>（由网关统一验证 Token 后路由到目标服务）：</p><p><img src="'+g+'" alt="JWT登录实现" loading="lazy"></p><p><img src="'+b+'" alt="JWT登录流程" loading="lazy"></p></blockquote></div><div class="hint-container info"><p class="hint-container-title">权限认证是如何实现的？</p><blockquote><p>RBAC（Role-Based Access Control）基于角色的访问控制模型。</p><p>基础组成部分：用户、角色、权限。</p><p>具体实现：</p><ul><li>5 张表（用户表、角色表、权限表、用户角色中间表、角色权限中间表）- 最基本的实现。</li><li>7 张表（用户表、角色表、权限表、菜单表、用户角色中间表、角色权限中间表、权限菜单中间表）- 多了一个菜单控制。</li></ul><p>权限框架：Apache Shiro 、 Spring Security（推荐）。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">上传数据的安全性你们怎么控制？</p><blockquote><p>使用<mark>非对称加密</mark>（或对称加密），给前端一个公钥让他把数据加密后传到后台，后台负责解密后处理数据。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">你负责的项目有没有遇到了哪些比较棘手的问题？怎么解决的？</p><blockquote><p>回答的路径：</p><ol><li>什么背景（技术问题）。</li><li>解决问题的过程。</li><li>最终落地的方案。</li></ol><p>示例：线上 BUG 排查（CPU 飙高、内存泄露、线程死锁、...）- 参考 JVM 学习笔记。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">你们项目中日志怎么采集的？</p><blockquote><p>为什么要采集日志？</p><ul><li>日志是定位系统问题的重要手段，可以根据日志信息快速定位系统中的问题。</li></ul><p>采集日志的方式有哪些？</p><ul><li>ELK（即 Elasticsearch、Logstash 和 Kibana 三个软件的首字母）。</li><li>常规采集：<mark>按天保存到一个日志文件</mark>。</li></ul><p><img src="'+f+'" alt="日志采集" loading="lazy"></p><p><strong>ELK 日志采集过程示例</strong>：</p><p><img src="'+q+'" alt="ELK日志采集" loading="lazy"></p><p><strong>参考回答</strong>：</p><ul><li>我们搭建了ELK日志采集系统。</li><li>介绍 ELK 的三个组件： <ul><li>Elasticsearch 是全文搜索分析引擎，可以对数据存储、搜索、分析。</li><li>Logstash 是一个数据收集引擎，可以动态收集数据，可以对数据进行过滤、分析，将数据存储到指定的位置。</li><li>Kibana 是一个数据分析和可视化平台，配合 Elasticsearch 对数据进行搜索，分析，图表化展示。</li></ul></li></ul></blockquote></div><div class="hint-container info"><p class="hint-container-title">查看日志的命令有哪些？</p><blockquote><p>参考 Linux 笔记 - 常用命令 - 查看文件的命令。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">生产问题该怎么排查？</p><blockquote><p>已经上线的 BUG 排查的思路：</p><ol><li>先分析日志：通常在业务中都会有日志的记录，或者查看系统日志，或者查看日志文件，然后定位问题。</li><li>IDEA 远程 DEBUG 测试环境（测试环境代码需跟生产环境代码一致）- （通常公司的生产环境是不允许远程 DEBUG 的）。</li></ol></blockquote></div><div class="hint-container info"><p class="hint-container-title">怎么快速定位系统的瓶颈？</p><blockquote><p>压测（性能测试）：项目上线之前测评系统的压力。</p><ul><li>压测目的：给出系统当前的性能状况，定位系统性能瓶颈或潜在性能瓶颈。</li><li>性能指标：响应时间、 QPS、并发数、吞吐量、 CPU 利用率、内存使用率、磁盘 IO、错误率。</li><li>压测工具：LoadRunner、<mark>Apache Jmeter</mark>、…。</li><li>后端工程师：根据压测的结果进行解决或调优（接口慢、代码报错、并发达不到要求、…）。</li></ul><p>监控工具、链路追踪工具：项目上线之后的监控。</p><ul><li>监控工具：Prometheus + Grafana。</li><li>链路追踪工具：Skywalking、Zipkin。</li></ul><p>线上诊断工具 Arthas（阿尔萨斯）：项目上线之后的监控、排查问题。</p><p><img src="'+_+'" alt="火焰图" loading="lazy"></p></blockquote></div>',45);function P(S,M){const t=o("RouteLink");return s(),c("div",null,[j,p(" more "),J,L,n("ul",null,[n("li",null,[i(t,{to:"/audition/java/core/"},{default:a(()=>[l("基础")]),_:1})])]),w,n("ul",null,[n("li",null,[i(t,{to:"/audition/java/collection/"},{default:a(()=>[l("集合")]),_:1})])]),T,n("ul",null,[n("li",null,[i(t,{to:"/audition/java/concurrent/"},{default:a(()=>[l("并发编程")]),_:1})])]),D,n("ul",null,[n("li",null,[i(t,{to:"/audition/java/io/"},{default:a(()=>[l("IO")]),_:1})])]),x,n("ul",null,[n("li",null,[i(t,{to:"/audition/java/jvm/"},{default:a(()=>[l("JVM")]),_:1})])]),C,n("ul",null,[n("li",null,[i(t,{to:"/audition/java/new/"},{default:a(()=>[l("新特性")]),_:1}),n("ul",null,[n("li",null,[i(t,{to:"/audition/java/new/jdk8.html"},{default:a(()=>[l("JDK8")]),_:1})]),n("li",null,[i(t,{to:"/audition/java/new/jdk9.html"},{default:a(()=>[l("JDK9")]),_:1})]),n("li",null,[i(t,{to:"/audition/java/new/jdk10.html"},{default:a(()=>[l("JDK10")]),_:1})]),n("li",null,[i(t,{to:"/audition/java/new/jdk11.html"},{default:a(()=>[l("JDK11")]),_:1})]),n("li",null,[i(t,{to:"/audition/java/new/jdk12.html"},{default:a(()=>[l("JDK12")]),_:1})]),n("li",null,[i(t,{to:"/audition/java/new/jdk13.html"},{default:a(()=>[l("JDK13")]),_:1})]),n("li",null,[i(t,{to:"/audition/java/new/jdk14.html"},{default:a(()=>[l("JDK14")]),_:1})]),n("li",null,[i(t,{to:"/audition/java/new/jdk15.html"},{default:a(()=>[l("JDK15")]),_:1})]),n("li",null,[i(t,{to:"/audition/java/new/jdk16.html"},{default:a(()=>[l("JDK16")]),_:1})]),n("li",null,[i(t,{to:"/audition/java/new/jdk17.html"},{default:a(()=>[l("JDK17")]),_:1})]),n("li",null,[i(t,{to:"/audition/java/new/jdk18.html"},{default:a(()=>[l("JDK18")]),_:1})]),n("li",null,[i(t,{to:"/audition/java/new/jdk19.html"},{default:a(()=>[l("JDK19")]),_:1})]),n("li",null,[i(t,{to:"/audition/java/new/jdk20.html"},{default:a(()=>[l("JDK20")]),_:1})]),n("li",null,[i(t,{to:"/audition/java/new/jdk21.html"},{default:a(()=>[l("JDK21")]),_:1})])])])]),A])}const K=e(y,[["render",P],["__file","index.html.vue"]]),B=JSON.parse('{"path":"/audition/java/","title":"Java","lang":"zh-CN","frontmatter":{"title":"Java","icon":"java","category":"面试题","tag":"面试题","timeline":true,"star":true,"description":"此处是一些 Java 高频面试题（持续更新中...）。 目录 基础 集合 并发编程 IO JVM 新特性 面试题汇总 常见集合面试题 Java 集合体系。 Java集合体系 ArrayList 底层的数据结构和扩容的机制。 每次扩容是原来的 1.5 倍。 如何实现数组和 List 之间的转换？ 数组转 List：Arrays.asList(T... a...","head":[["meta",{"property":"og:url","content":"https://SuperChenWenjing.github.io/audition/java/"}],["meta",{"property":"og:site_name","content":"陈文景"}],["meta",{"property":"og:title","content":"Java"}],["meta",{"property":"og:description","content":"此处是一些 Java 高频面试题（持续更新中...）。 目录 基础 集合 并发编程 IO JVM 新特性 面试题汇总 常见集合面试题 Java 集合体系。 Java集合体系 ArrayList 底层的数据结构和扩容的机制。 每次扩容是原来的 1.5 倍。 如何实现数组和 List 之间的转换？ 数组转 List：Arrays.asList(T... a..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-05T13:21:17.000Z"}],["meta",{"property":"article:author","content":"陈文景"}],["meta",{"property":"article:tag","content":"面试题"}],["meta",{"property":"article:modified_time","content":"2024-05-05T13:21:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-05T13:21:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"陈文景\\",\\"email\\":\\"2646530197@qq.com\\",\\"url\\":\\"https://superchenwenjing.github.io\\"}]}"]],"date":"2024-03-08T16:03:07.000Z"},"headers":[{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[{"level":3,"title":"基础","slug":"基础","link":"#基础","children":[]},{"level":3,"title":"集合","slug":"集合","link":"#集合","children":[]},{"level":3,"title":"并发编程","slug":"并发编程","link":"#并发编程","children":[]},{"level":3,"title":"IO","slug":"io","link":"#io","children":[]},{"level":3,"title":"JVM","slug":"jvm","link":"#jvm","children":[]},{"level":3,"title":"新特性","slug":"新特性","link":"#新特性","children":[]}]},{"level":2,"title":"面试题汇总","slug":"面试题汇总","link":"#面试题汇总","children":[{"level":3,"title":"常见集合面试题","slug":"常见集合面试题","link":"#常见集合面试题","children":[]},{"level":3,"title":"多线程面试题","slug":"多线程面试题","link":"#多线程面试题","children":[]},{"level":3,"title":"场景面试题","slug":"场景面试题","link":"#场景面试题","children":[]}]}],"git":{"createdTime":1709913787000,"updatedTime":1714915277000,"contributors":[{"name":"陈文景","email":"2646530197@qq.com","commits":4}]},"readingTime":{"minutes":12.67,"words":3800},"filePathRelative":"audition/java/README.md","localizedDate":"2024年3月8日","excerpt":"<p>此处是一些 Java 高频面试题（持续更新中...）。</p>\\n","autoDesc":true}');export{K as comp,B as data};
