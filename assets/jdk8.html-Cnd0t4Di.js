import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as a,b as r,d as o,f as n}from"./app-BMx0Tcqv.js";const l="/assets/常见的函数接口-D3X86gzM.png",i="/assets/函数接口的命名规则-DTBK0ccm.png",s="/assets/何为方法引用-BUmzap1k.png",c="/assets/方法引用的格式说明-CPYeJ_GS.png",p={},d=o("p",null,"此处是一些 Java JDK8 的新特性（持续更新中...）。",-1),m=n('<h2 id="jdk8" tabindex="-1"><a class="header-anchor" href="#jdk8"><span>JDK8</span></a></h2><p><strong>常见的函数接口：</strong></p><p><img src="'+l+'" alt="常见的函数接口" loading="lazy"></p><p><strong>函数接口的命名规则：</strong></p><p><img src="'+i+'" alt="函数接口的命名规则" loading="lazy"></p><p><strong>何为方法引用：</strong></p><p><img src="'+s+'" alt="何为方法引用" loading="lazy"></p><p><strong>方法引用的格式说明：</strong></p><p><img src="'+c+'" alt="方法引用的格式说明" loading="lazy"></p><h2 id="stream" tabindex="-1"><a class="header-anchor" href="#stream"><span>Stream</span></a></h2><h3 id="_1-构建流" tabindex="-1"><a class="header-anchor" href="#_1-构建流"><span>1.构建流</span></a></h3><p><strong>用已有数据构建出 Stream 对象：</strong></p><ul><li>从集合构建：<code>集合.stream()</code>。</li><li>从数组构建：<code>Arrays.stream()</code>。</li><li>从对象构建：<code>Stream.of(对象...)</code>。</li></ul><h3 id="_2-生成流" tabindex="-1"><a class="header-anchor" href="#_2-生成流"><span>2.生成流</span></a></h3><p><strong>不用现有数据生成 Stream 对象：</strong></p><blockquote><p>以下只是举例说明（还有很多生成流的方式）。</p></blockquote><ul><li>简单生成：<code>IntStream.range(开始位置, 结束位置)</code> - 根据开始和结束位置生成中间的数据。</li><li>依赖上一个值生成当前值：<code>IntStream.iterate(初始元素, 终止条件, 生成规则)</code> - 可以根据上一个元素的值来生成当前元素。</li><li>不依赖上一个值生成当前值：<code>IntStream.generate(生成规则)</code> - 不依赖上一个元素的值来生成当前的元素。</li></ul><h3 id="_3-合并与截取" tabindex="-1"><a class="header-anchor" href="#_3-合并与截取"><span>3.合并与截取</span></a></h3><ul><li>将两个流合并成一个流：<code>Stream.concat(流1, 流2)</code>。</li><li>截取流中的一部分数据： <ul><li>根据位置： <ul><li><code>流.skip(long n)</code> - 跳过 n 个数据，保留剩下的数据。</li><li><code>流.limit(long n)</code> - 保留 n 个数据，剩下的数据则不要了。</li></ul></li><li>根据条件： <ul><li><code>流.takeWhile(条件)</code> - 条件成立则保留，一旦条件不成立，则剩下的数据也不要了。</li><li><code>流.dropWhile(条件)</code> - 条件成立则舍弃，一旦条件不成立，则剩下的数据保留下来。</li></ul></li></ul></li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>![Java Stream](../assets/Java Stream.png)</p>',21);function h(g,u){return t(),a("div",null,[d,r(" more "),m])}const y=e(p,[["render",h],["__file","jdk8.html.vue"]]),J=JSON.parse('{"path":"/notes/java/new/jdk8.html","title":"JDK8","lang":"zh-CN","frontmatter":{"title":"JDK8","icon":"Code","category":"Java","tag":"新特性","timeline":true,"star":true,"description":"此处是一些 Java JDK8 的新特性（持续更新中...）。 JDK8 常见的函数接口： 常见的函数接口 函数接口的命名规则： 函数接口的命名规则 何为方法引用： 何为方法引用 方法引用的格式说明： 方法引用的格式说明 Stream 1.构建流 用已有数据构建出 Stream 对象： 从集合构建：集合.stream()。 从数组构建：Arrays.s...","head":[["meta",{"property":"og:url","content":"https://SuperChenWenjing.github.io/notes/java/new/jdk8.html"}],["meta",{"property":"og:site_name","content":"陈文景"}],["meta",{"property":"og:title","content":"JDK8"}],["meta",{"property":"og:description","content":"此处是一些 Java JDK8 的新特性（持续更新中...）。 JDK8 常见的函数接口： 常见的函数接口 函数接口的命名规则： 函数接口的命名规则 何为方法引用： 何为方法引用 方法引用的格式说明： 方法引用的格式说明 Stream 1.构建流 用已有数据构建出 Stream 对象： 从集合构建：集合.stream()。 从数组构建：Arrays.s..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-18T15:47:56.000Z"}],["meta",{"property":"article:author","content":"陈文景"}],["meta",{"property":"article:tag","content":"新特性"}],["meta",{"property":"article:modified_time","content":"2024-04-18T15:47:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JDK8\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-18T15:47:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"陈文景\\",\\"email\\":\\"2646530197@qq.com\\",\\"url\\":\\"https://superchenwenjing.github.io\\"}]}"]],"date":"2024-04-18T02:39:06.000Z"},"headers":[{"level":2,"title":"JDK8","slug":"jdk8","link":"#jdk8","children":[]},{"level":2,"title":"Stream","slug":"stream","link":"#stream","children":[{"level":3,"title":"1.构建流","slug":"_1-构建流","link":"#_1-构建流","children":[]},{"level":3,"title":"2.生成流","slug":"_2-生成流","link":"#_2-生成流","children":[]},{"level":3,"title":"3.合并与截取","slug":"_3-合并与截取","link":"#_3-合并与截取","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1713407946000,"updatedTime":1713455276000,"contributors":[{"name":"陈文景","email":"2646530197@qq.com","commits":2}]},"readingTime":{"minutes":1.51,"words":453},"filePathRelative":"notes/java/new/jdk8.md","localizedDate":"2024年4月18日","excerpt":"<p>此处是一些 Java JDK8 的新特性（持续更新中...）。</p>\\n","autoDesc":true}');export{y as comp,J as data};
