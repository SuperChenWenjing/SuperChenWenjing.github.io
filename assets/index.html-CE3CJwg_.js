import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o,c as l,b as i,d as n,e as s,a as e,f as a}from"./app-BUFo3Ghc.js";const u="/assets/数据库存储数据-BZE4d2cl.png",k="/assets/Java程序读取数据库-pPH6g-ch.png",r="/assets/JDBC简单执行过程-QrBtYEqY.png",d="/assets/SQL语句问题-Dh_Oym1c.png",m="/assets/SQL语句未设置参数问题-chu_tGiR.png",v="/assets/用户名或密码错误问题-DCQ4f9AY.png",b="/assets/通信异常-BddubEG6.png",h="/assets/主流连接池的功能对比-BfUIKHIb.png",g="/assets/Mysql性能数据-DKf6Us3K.png",y="/assets/ThreadLocal-Cfrzk2ge.png",S={},w=n("p",null,"此处是一些 JDBC 的核心知识。",-1),_=a('<h2 id="一、引言" tabindex="-1"><a class="header-anchor" href="#一、引言"><span>一、引言</span></a></h2><h3 id="_1-1-数据的存储" tabindex="-1"><a class="header-anchor" href="#_1-1-数据的存储"><span>1.1 数据的存储</span></a></h3><p>我们在开发 Java 程序时，数据都是存储都是在内存中，属于临时存储，当程序停止或重启时，内存中的数据就丢失了！</p><p>我们为了解决数据的长期存储问题，有如下解决方案：</p><ol><li>数据通过 I/O 流技术，存储在本地磁盘中，解决了持久化问题，但是没有结构和逻辑，不方便管理和维护。</li><li>通过关系型数据库，将数据按照特定的格式交由数据库管理系统维护。关系型数据库是通过库和表分隔不同的数据，表中数据存储的方式是行和列，区分相同格式不同值的数据。</li></ol><p><img src="'+u+'" alt="数据库存储数据" loading="lazy"></p><h3 id="_1-2-数据的操作" tabindex="-1"><a class="header-anchor" href="#_1-2-数据的操作"><span>1.2 数据的操作</span></a></h3><p>数据存储在数据库，仅仅是解决了我们数据存储的问题，但当我们程序运行时，需要读取数据，以及对数据做增删改的操作，那么我们如何通过 Java 程序对数据库中的数据做增删改查呢？</p><p><img src="'+k+'" alt="Java程序读取数据库" loading="lazy"></p><h2 id="二、jdbc" tabindex="-1"><a class="header-anchor" href="#二、jdbc"><span>二、JDBC</span></a></h2><h3 id="_2-1-jdbc的概念" tabindex="-1"><a class="header-anchor" href="#_2-1-jdbc的概念"><span>2.1 JDBC的概念</span></a></h3><ul><li>JDBC（Java Database Connectivity），意为 Java 数据库连接。</li><li>JDBC 是 Java 提供的一组独立于任何数据库管理系统的 API。</li><li>Java 提供接口规范，由各个数据库厂商提供接口的实现，厂商提供的实现类封装成 <code>jar</code> 文件，也就是我们俗称的数据库驱动 <code>jar</code> 包。</li><li>JDBC 充分体现了面向接口编程的好处，程序员只关心标准和规范，而无需关注实现过程。</li></ul><p><img src="'+r+'" alt="JDBC简单执行过程" loading="lazy"></p><h3 id="_2-2-jdbc的核心组成" tabindex="-1"><a class="header-anchor" href="#_2-2-jdbc的核心组成"><span>2.2 JDBC的核心组成</span></a></h3><ul><li><strong>接口规范：</strong><ul><li>为了项目代码的可移植性、可维护性，SUN 公司从最初就制定了 Java 程序连接各种数据库的统一接口规范。这样的话，不管是连接哪一种 DBMS 软件，Java 代码可以保持一致性。</li><li>接口存储在 <code>java.sql</code> 和 <code>javax.sql</code> 包下。</li></ul></li><li><strong>实现规范：</strong><ul><li>因为各个数据库厂商的 DBMS 软件各有不同，那么各自的内部如何通过 SQL 实现增、删、改、查等操作管理数据，只有这个数据库厂商自己更清楚，因此把接口规范的实现交给各个数据库厂商自己实现。</li><li>厂商将实现内容和过程封装成 <code>jar</code> 文件，我们程序员只需要将 <code>jar</code> 文件引入到项目中集成即可，就可以开发调用实现过程操作数据库了。</li></ul></li></ul><h2 id="三、jdbc快速入门" tabindex="-1"><a class="header-anchor" href="#三、jdbc快速入门"><span>三、JDBC快速入门</span></a></h2><h3 id="_3-1-jdbc搭建步骤" tabindex="-1"><a class="header-anchor" href="#_3-1-jdbc搭建步骤"><span>3.1 JDBC搭建步骤</span></a></h3>',17),f=n("li",null,"准备数据库。",-1),q={href:"https://downloads.mysql.com/archives/c-j/",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"jar",-1),D=n("li",null,[s("创建 Java 项目，在项目下创建 lib 文件夹，将下载的驱动 "),n("code",null,"jar"),s(" 包复制到文件夹里。")],-1),C=n("li",null,"选中 lib 文件夹右键 ---> Add as Library 与项目集成。",-1),x=n("li",null,"编写代码。",-1),L=a(`<h3 id="_3-2-代码实现" tabindex="-1"><a class="header-anchor" href="#_3-2-代码实现"><span>3.2 代码实现</span></a></h3><h4 id="_3-2-1-数据库" tabindex="-1"><a class="header-anchor" href="#_3-2-1-数据库"><span>3.2.1 数据库</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> jdbc_demo<span class="token punctuation">;</span>

<span class="token keyword">use</span> jdbc_demo<span class="token punctuation">;</span>

<span class="token keyword">create</span> <span class="token keyword">table</span> t_emp
<span class="token punctuation">(</span>
    emp_id     <span class="token keyword">int</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">&#39;员工编号&#39;</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
    emp_name   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;员工姓名&#39;</span><span class="token punctuation">,</span>
    emp_salary <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;员工薪资&#39;</span><span class="token punctuation">,</span>
    emp_age    <span class="token keyword">int</span>           <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;员工年龄&#39;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> t_emp <span class="token punctuation">(</span>emp_name<span class="token punctuation">,</span>emp_salary<span class="token punctuation">,</span>emp_age<span class="token punctuation">)</span>
<span class="token keyword">values</span>  <span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token number">777.77</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span> <span class="token number">666.66</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token string">&#39;王五&#39;</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token string">&#39;赵六&#39;</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token string">&#39;陈七&#39;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-2-java代码" tabindex="-1"><a class="header-anchor" href="#_3-2-2-java代码"><span>3.2.2 Java代码</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>chenwenjing</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcQuick</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span>， <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.注册驱动</span>
        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
        <span class="token comment">// 2.获取数据库连接</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/jdbc_demo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 3.创建 Statement 对象</span>
        <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">&quot;select emp_id,emp_name,emp_salary,emp_age from t_emp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 4.编写 SQL 语句并执行，获取结果</span>
        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 5.处理结果</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> empId <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;emp_id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> empName <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;emp_name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> empSalary <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;emp_salary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> empAge <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;emp_age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>empId <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span> <span class="token operator">+</span> empName <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span> <span class="token operator">+</span> empSalary <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span> <span class="token operator">+</span> empAge<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 6.释放资源（先开后关原则）</span>
        resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-3-步骤总结" tabindex="-1"><a class="header-anchor" href="#_3-3-3-步骤总结"><span>3.3.3 步骤总结</span></a></h4><ol><li>注册驱动（依赖的驱动类来进行安装）。</li><li>获取连接（Connection 建立连接）。</li><li>创建发送 SQL 语句对象（Connection 创建发送 SQL 语句的 Statement）。</li><li>发送 SQL 语句，并获取返回结果（Statement 发送 SQL 语句到数据库并且取得返回结果）。</li><li>结果集解析（结果集解析，将查询结果解析出来）。</li><li>资源关闭（释放 ResultSet、Statement 、Connection）。</li></ol><h2 id="四、核心api理解" tabindex="-1"><a class="header-anchor" href="#四、核心api理解"><span>四、核心API理解</span></a></h2><h3 id="_4-1-注册驱动" tabindex="-1"><a class="header-anchor" href="#_4-1-注册驱动"><span>4.1 注册驱动</span></a></h3><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><ul><li><p>在 Java 中，当使用 JDBC（Java Database Connectivity）连接数据库时，需要加载数据库特定的驱动程序，以便与数据库进行通信。加载驱动程序的目的是为了注册驱动程序，使得 JDBC API 能够识别并与特定的数据库进行交互。</p></li><li><p>从 JDK6 开始，不再需要显式地调用 <code>Class.forName()</code> 来加载 JDBC 驱动程序，只要在类路径中集成了对应的 <code>jar</code> 文件，则会自动在初始化时注册驱动程序。</p></li></ul><h3 id="_4-2-connection" tabindex="-1"><a class="header-anchor" href="#_4-2-connection"><span>4.2 Connection</span></a></h3><ul><li>Connection 接口是 JDBC API 的重要接口，用于建立与数据库的通信通道。 <ul><li>换而言之，Connection 对象不为空，则代表一次数据库连接。</li></ul></li><li>在建立连接时，需要指定数据库 URL、用户名、密码参数。 <ul><li>URL：jdbc:mysql://localhost:3306/jdbc_demo <ul><li>jdbc:mysql://IP地址:端口号/数据库名称?参数键值对1&amp;参数键值对2&amp;...</li></ul></li></ul></li><li><code>Connection</code> 接口还负责管理事务，<code>Connection</code> 接口提供了 <code>commit</code> 和 <code>rollback</code> 方法，用于提交事务和回滚事务。</li><li>可以创建 <code>Statement</code> 对象，用于执行 SQL 语句并与数据库进行交互。</li><li>在使用 JDBC 技术时，必须要先获取 Connection 对象，在使用完毕后，要释放资源，避免资源占用浪费及泄漏。</li></ul><h3 id="_4-3-statement" tabindex="-1"><a class="header-anchor" href="#_4-3-statement"><span>4.3 Statement</span></a></h3><ul><li><code>Statement</code> 接口用于执行 SQL 语句并与数据库进行交互。 <ul><li>它是 JDBC API 中的一个重要接口。</li><li>通过 <code>Statement</code> 对象，可以向数据库发送 SQL 语句并获取执行结果。</li></ul></li><li>结果可以是一个或多个结果。 <ul><li>增删改：返回的是受影响的行数（单个结果）。</li><li>查询：又分为单行单列、多行多列、单行多列（多个结果）。</li></ul></li><li>但是 <code>Statement</code> 接口在执行 SQL 语句时，会产生 <strong>SQL 注入攻击问题</strong>。 <ul><li>当使用 <code>Statement</code> 执行动态构建的 SQL 查询时，往往需要将查询条件与 SQL 语句拼接在一起，直接将参数和 SQL 语句一并生成，让 SQL 的查询条件始终为 <code>true</code> 得到结果。</li></ul></li></ul><h3 id="_4-4-preparedstatement" tabindex="-1"><a class="header-anchor" href="#_4-4-preparedstatement"><span>4.4 PreparedStatement</span></a></h3><ul><li><code>PreparedStatement</code>是 <code>Statement</code> 接口的子接口，用于执行<strong>预编译</strong>的 SQL 查询，作用如下： <ul><li>预编译 SQL 语句：在创建 PreparedStatement 时，就会预编译 SQL 语句，也就是 SQL 语句已经固定了。</li><li>防止 SQL 注入：<code>PreparedStatement</code> 支持参数化查询，将数据作为参数传递到 SQL 语句中，采用 <code>?</code> 占位符的方式，将传入的参数用一对单引号 <code>&#39;&#39;</code> 包裹起来，无论传递什么都会被作为值。 <ul><li>有效防止传入关键字或值导致 SQL 注入问题。</li></ul></li><li>性能提升：PreparedStatement 是预编译 SQL 语句，同一 SQL 语句多次执行的情况下，可以复用，不必每次重新编译和解析。</li></ul></li><li>后续的学习我们都是基于 PreparedStatement 进行实现，更安全、效率更高！</li></ul><h3 id="_4-5-resultset" tabindex="-1"><a class="header-anchor" href="#_4-5-resultset"><span>4.5 ResultSet</span></a></h3><ul><li><code>ResultSet</code>是 JDBC API 中的一个接口，用于表示从数据库中<strong>执行查询语句所返回的结果集</strong>。 <ul><li>它提供了一种用于遍历和访问查询结果的方式。</li></ul></li><li>遍历结果：ResultSet 可以使用 <code>next()</code> 方法将游标移动到结果集的下一行，逐行遍历数据库查询的结果，返回值为 <code>boolean</code> 类型，<code>true</code> 代表有下一行结果，<code>false</code> 则代表没有。</li><li>获取单列结果：可以通过 <code>getXxx</code> 的方法获取单列的数据，该方法为重载方法，支持索引和列名进行获取。</li></ul><h2 id="五、基于preparedstatement实现crud" tabindex="-1"><a class="header-anchor" href="#五、基于preparedstatement实现crud"><span>五、基于PreparedStatement实现CRUD</span></a></h2><h3 id="_5-1-查询单行单列" tabindex="-1"><a class="header-anchor" href="#_5-1-查询单行单列"><span>5.1 查询单行单列</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">querySingleRowAndColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.注册驱动</span>
        <span class="token comment">// Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span>

        <span class="token comment">// 2.获取数据库连接</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/jdbc_demo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 3.创建 PreparedStatement 对象，并预编译 SQL 语句</span>
        <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">&quot;select count(*) as count from t_emp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 4.执行 SQL 语句，获取结果</span>
        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 5.处理结果</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> count <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;count&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;count = &quot;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 6.释放资源（先开后关原则）</span>
        resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-查询单行多列" tabindex="-1"><a class="header-anchor" href="#_5-2-查询单行多列"><span>5.2 查询单行多列</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">querySingleRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
   <span class="token comment">// 1.注册驱动</span>
   <span class="token comment">// Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span>

   <span class="token comment">// 2.获取数据库连接</span>
   <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/jdbc_demo&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 3.创建 PreparedStatement 对象，并预编译 SQL 语句，使用 ? 占位符</span>
   <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">&quot;select emp_id,emp_name,emp_salary,emp_age from t_emp where emp_id = ?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 4.为占位符赋值，索引从 1 开始，执行 SQL 语句，获取结果</span>
   preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 5.处理结果</span>
   <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">int</span> empId <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;emp_id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span> empName <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;emp_name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span> empSalary <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;emp_salary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> empAge <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;emp_age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>empId<span class="token operator">+</span><span class="token string">&quot;\\t&quot;</span><span class="token operator">+</span>empName<span class="token operator">+</span><span class="token string">&quot;\\t&quot;</span><span class="token operator">+</span>empSalary<span class="token operator">+</span><span class="token string">&quot;\\t&quot;</span><span class="token operator">+</span>empAge<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// 6.释放资源（先开后关原则）</span>
   resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-查询多行多列" tabindex="-1"><a class="header-anchor" href="#_5-3-查询多行多列"><span>5.3 查询多行多列</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryMoreRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
   <span class="token comment">// 1.注册驱动</span>
   <span class="token comment">// Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span>

   <span class="token comment">// 2.获取数据库连接</span>
   <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/jdbc_demo&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 3.创建 Statement 对象</span>
   <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">&quot;select emp_id,emp_name,emp_salary,emp_age from t_emp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 4.编写 SQL 语句并执行，获取结果</span>
   <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 5.处理结果</span>
   <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">int</span> empId <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;emp_id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span> empName <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;emp_name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span> empSalary <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;emp_salary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> empAge <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;emp_age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>empId<span class="token operator">+</span><span class="token string">&quot;\\t&quot;</span><span class="token operator">+</span>empName<span class="token operator">+</span><span class="token string">&quot;\\t&quot;</span><span class="token operator">+</span>empSalary<span class="token operator">+</span><span class="token string">&quot;\\t&quot;</span><span class="token operator">+</span>empAge<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// 6.释放资源（先开后关原则）</span>
   resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-新增" tabindex="-1"><a class="header-anchor" href="#_5-4-新增"><span>5.4 新增</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
   <span class="token comment">// 1.注册驱动</span>
   <span class="token comment">// Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span>

   <span class="token comment">// 2.获取数据库连接</span>
   <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/jdbc_demo&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 3.创建Statement对象</span>
   <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">&quot;insert into t_emp (emp_name,emp_salary,emp_age)values  (?, ?, ?)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 4.为占位符赋值，索引从 1 开始，编写 SQL 语句并执行，获取结果</span>
   preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;测试&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   preparedStatement<span class="token punctuation">.</span><span class="token function">setDouble</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">666.66</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   preparedStatement<span class="token punctuation">.</span><span class="token function">setDouble</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span> result <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 5.处理结果</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;添加成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;添加失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// 6.释放资源（先开后关原则）</span>
   preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-5-修改" tabindex="-1"><a class="header-anchor" href="#_5-5-修改"><span>5.5 修改</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
   <span class="token comment">// 1.注册驱动</span>
   <span class="token comment">// Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span>

   <span class="token comment">// 2.获取数据库连接</span>
   <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/jdbc_demo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 3.创建 Statement 对象</span>
   <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">&quot;update t_emp set emp_salary = ? where emp_id = ?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 4.为占位符赋值，索引从 1 开始，编写 SQL 语句并执行，获取结果</span>
   preparedStatement<span class="token punctuation">.</span><span class="token function">setDouble</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">888.88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   preparedStatement<span class="token punctuation">.</span><span class="token function">setDouble</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span> result <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 5.处理结果</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;修改成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;修改失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// 6.释放资源（先开后关原则）</span>
   preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-6-删除" tabindex="-1"><a class="header-anchor" href="#_5-6-删除"><span>5.6 删除</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
   <span class="token comment">// 1.注册驱动</span>
   <span class="token comment">// Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span>

   <span class="token comment">// 2.获取数据库连接</span>
   <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/jdbc_demo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 3.创建 Statement 对象</span>
   <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">&quot;delete from t_emp where emp_id = ?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 4.为占位符赋值，索引从 1 开始，编写 SQL 语句并执行，获取结果</span>
   preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span> result <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 5.处理结果</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;删除成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;删除失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// 6.释放资源（先开后关原则）</span>
   preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、常见问题" tabindex="-1"><a class="header-anchor" href="#六、常见问题"><span>六、常见问题</span></a></h2><h3 id="_6-1-资源的管理" tabindex="-1"><a class="header-anchor" href="#_6-1-资源的管理"><span>6.1 资源的管理</span></a></h3><div class="hint-container warning"><p class="hint-container-title">注意关闭资源！</p><p>在使用 JDBC 的相关资源时：比如Connection、PreparedStatement、ResultSet 使用完毕后，要及时关闭这些资源以释放数据库服务器资源和避免内存泄漏是很重要的。</p></div><h3 id="_6-2-sql语句问题" tabindex="-1"><a class="header-anchor" href="#_6-2-sql语句问题"><span>6.2 SQL语句问题</span></a></h3><p><code>java.sql.SQLSyntaxErrorException</code>：SQL 语句错误异常。</p><p><strong>一般有几种可能：</strong></p><ol><li>SQL 语句有错误，检查 SQL 语句！ <ol><li>建议 SQL 语句在 SQL 工具中测试后再复制到 Java 程序中！</li></ol></li><li>连接数据库的 URL 中，数据库名称编写错误，也会报该异常！</li></ol><p><img src="`+d+'" alt="SQL语句问题" loading="lazy"></p><h3 id="_6-3-sql语句未设置参数问题" tabindex="-1"><a class="header-anchor" href="#_6-3-sql语句未设置参数问题"><span>6.3 SQL语句未设置参数问题</span></a></h3><p><code>java.sql.SQLException</code>：No value specified for parameter 1。</p><p>注意：在使用预编译 SQL 语句时，如果有 <code>?</code> 占位符，要为每一个占位符赋值，否则报该错误！</p><p><img src="'+m+'" alt="SQL语句未设置参数问题" loading="lazy"></p><h3 id="_6-4-用户名或密码错误问题" tabindex="-1"><a class="header-anchor" href="#_6-4-用户名或密码错误问题"><span>6.4 用户名或密码错误问题</span></a></h3><p>连接数据库时，如果用户名或密码输入错误，也会报 <code>SQLException</code>，所以容易混淆！所以一定要看清楚异常后面的原因描述。</p><p><img src="'+v+'" alt="用户名或密码错误问题" loading="lazy"></p><h3 id="_6-5-通信异常" tabindex="-1"><a class="header-anchor" href="#_6-5-通信异常"><span>6.5 通信异常</span></a></h3><p>在连接数据库的 URL 中，如果 IP 或端口写错了，会报异常：<code>com.mysql.cj.jdbc.exceptions.CommunicationsException: Communications link failure</code>。</p><p><img src="'+b+`" alt="通信异常" loading="lazy"></p><h2 id="七、jdbc扩展" tabindex="-1"><a class="header-anchor" href="#七、jdbc扩展"><span>七、JDBC扩展</span></a></h2><h3 id="_7-1-实体类和orm" tabindex="-1"><a class="header-anchor" href="#_7-1-实体类和orm"><span>7.1 实体类和ORM</span></a></h3><ul><li>在使用 JDBC 操作数据库时，我们会发现数据都是零散的，明明在数据库中是一行完整的数据，到了 Java 中变成了一个一个的变量，不利于维护和管理。</li><li>而我们 Java 是面向对象的，一个表对应的是一个类，一行数据就对应的是 Java 中的一个对象，一个列对应的是对象的属性，所以我们要把数据存储在一个载体里，这个载体就是实体类！</li><li>ORM（Object Relational Mapping）思想，<strong>对象到关系数据库的映射</strong>，作用是在编程中，把面向对象的概念跟数据库中表的概念对应起来，以面向对象的角度操作数据库中的数据，即一张表对应一个类，一行数据对应一个对象，一个列对应一个属性！</li><li>当下 JDBC 中这种过程我们称其为手动 ORM，后续我们也会学习 ORM 框架，比如 MyBatis、JPA 等。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>chenwenjing<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span>

<span class="token comment">// 类名和数据库名对应，但是表名一般缩写，类名要全写！</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> empId<span class="token punctuation">;</span> <span class="token comment">// emp_id = empId 数据库中列名用下划线分隔，属性名用驼峰！</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> empName<span class="token punctuation">;</span> <span class="token comment">// emp_name = empName</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> empSalary<span class="token punctuation">;</span> <span class="token comment">// emp_salary = empSalary</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> empAge<span class="token punctuation">;</span> <span class="token comment">// emp_age = empAge</span>

    <span class="token comment">// 省略 get、set、无参、有参、toString 方法。</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>封装代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">querySingleRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
   <span class="token comment">// 1.注册驱动</span>
   <span class="token comment">// Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span>

   <span class="token comment">// 2.获取数据库连接</span>
   <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/jdbc_demo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 3.创建 PreparedStatement 对象，并预编译 SQL 语句，使用 ? 占位符</span>
   <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">&quot;select emp_id,emp_name,emp_salary,emp_age from t_emp where emp_id = ?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 4.为占位符赋值，索引从 1 开始，执行 SQL 语句，获取结果</span>
   preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 预先创建实体类变量</span>
   <span class="token class-name">Employee</span> employee <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
   <span class="token comment">// 5.处理结果</span>
   <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">int</span> empId <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;emp_id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span> empName <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;emp_name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">Double</span> empSalary <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;emp_salary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> empAge <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;emp_age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 当结果集中有数据，再进行对象的创建</span>
      employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span>empId<span class="token punctuation">,</span>empName<span class="token punctuation">,</span>empSalary<span class="token punctuation">,</span>empAge<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;employee = &quot;</span> <span class="token operator">+</span> employee<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 6.释放资源（先开后关原则）</span>
   resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-主键回显" tabindex="-1"><a class="header-anchor" href="#_7-2-主键回显"><span>7.2 主键回显</span></a></h3><p>在数据中，执行新增操作时，主键列为自动增长，可以在表中直观的看到，但是在 Java 程序中，我们执行完新增后，只能得到受影响行数，无法得知当前新增数据的主键值。</p><p>在 Java 程序中获取数据库中插入新数据后的主键值，并赋值给 Java 对象，此操作为主键回显。</p><p>代码实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReturnPK</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
   <span class="token comment">// 1.注册驱动</span>
   <span class="token comment">//  Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span>

   <span class="token comment">// 2.获取数据库连接</span>
   <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/jdbc_demo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 3.创建 preparedStatement 对象，传入需要主键回显参数 Statement.RETURN_GENERATED_KEYS</span>
   <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">&quot;insert into t_emp (emp_name, emp_salary, emp_age)values  (?, ?,?)&quot;</span><span class="token punctuation">,</span><span class="token class-name">Statement</span><span class="token punctuation">.</span><span class="token constant">RETURN_GENERATED_KEYS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 4.编写 SQL 语句并执行，获取结果</span>
   <span class="token class-name">Employee</span> employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">&quot;测试&quot;</span><span class="token punctuation">,</span><span class="token number">666.66</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>employee<span class="token punctuation">.</span><span class="token function">getEmpName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   preparedStatement<span class="token punctuation">.</span><span class="token function">setDouble</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>employee<span class="token punctuation">.</span><span class="token function">getEmpSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   preparedStatement<span class="token punctuation">.</span><span class="token function">setDouble</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>employee<span class="token punctuation">.</span><span class="token function">getEmpAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span> result <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 5.处理结果</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;添加成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;添加失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// 6.获取生成的主键列值，返回的是 resultSet，在结果集中获取主键列值</span>
   <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">getGeneratedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">int</span> empId <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      employee<span class="token punctuation">.</span><span class="token function">setEmpId</span><span class="token punctuation">(</span>empId<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   
   <span class="token comment">// 7.释放资源（先开后关原则）</span>
   resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3-批量操作" tabindex="-1"><a class="header-anchor" href="#_7-3-批量操作"><span>7.3 批量操作</span></a></h3><p>插入多条数据时，一条一条发送给数据库执行，效率低下！</p><p>通过批量操作，可以提升多次操作效率！</p><p>代码实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
   <span class="token comment">// 1.注册驱动</span>
   <span class="token comment">//  Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span>

   <span class="token comment">// 2.获取连接</span>
   <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql:///jdbc_demo?rewriteBatchedStatements=true&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 3.编写 SQL 语句</span>
   <span class="token comment">/*
      注意：
      1、必须在连接数据库的 URL 后面追加 ?rewriteBatchedStatements=true 用于开启允许批量操作
      2、新增 SQL 必须用 values 且语句最后不要追加 ; 结束
      3、调用 addBatch() 方法，将 SQL 语句进行批量添加操作
      4、统一执行批量操作，调用 executeBatch()
   */</span>
   <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;insert into t_emp (emp_name,emp_salary,emp_age) values (?,?,?)&quot;</span><span class="token punctuation">;</span>

   <span class="token comment">// 4.创建预编译的 PreparedStatement，传入 SQL 语句</span>
   <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 获取当前行代码执行的时间毫秒值</span>
   <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">// 5.为占位符赋值</span>
      preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;marry&quot;</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      preparedStatement<span class="token punctuation">.</span><span class="token function">setDouble</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100.0</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>

      preparedStatement<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// 执行批量操作</span>
   preparedStatement<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消耗时间：&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 6.释放资源（先开后关原则）</span>
   preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="八、连接池" tabindex="-1"><a class="header-anchor" href="#八、连接池"><span>八、连接池</span></a></h2><h3 id="_8-1-现有问题" tabindex="-1"><a class="header-anchor" href="#_8-1-现有问题"><span>8.1 现有问题</span></a></h3><p>每次操作数据库都要获取新连接，使用完毕后就 <code>close</code> 释放，频繁的创建和销毁造成资源浪费。</p><p>连接的数量无法把控，对服务器来说压力巨大。</p><h3 id="_8-2-连接池" tabindex="-1"><a class="header-anchor" href="#_8-2-连接池"><span>8.2 连接池</span></a></h3><p>连接池就是数据库连接对象的缓冲区，通过配置，由连接池负责创建连接、管理连接、释放连接等操作。</p><p>预先创建数据库连接放入连接池，用户在请求时，通过池直接获取连接，使用完毕后，将连接放回池中，避免了频繁的创建和销毁，同时解决了创建的效率。</p><p>当池中无连接可用，且未达到上限时，连接池会新建连接。</p><p>池中连接达到上限，用户请求会等待，可以设置超时时间。</p><h3 id="_8-3-常见连接池" tabindex="-1"><a class="header-anchor" href="#_8-3-常见连接池"><span>8.3 常见连接池</span></a></h3><p>JDBC 的数据库连接池使用 <code>javax.sql.DataSource</code> 接口进行规范，所有的第三方连接池都实现此接口，自行添加具体实现！</p><p>也就是说，所有连接池获取连接的和回收连接方法都一样，不同的只有性能和扩展功能!</p><ul><li>DBCP 是 Apache 提供的数据库连接池，速度相对 C3P0 较快，但自身存在一些 BUG。</li><li>C3P0 是一个开源组织提供的一个数据库连接池，速度相对较慢，稳定性还可以。</li><li>Proxool 是 Sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能， 稳定性较 C3P0 差一点</li><li><strong>Druid 是阿里提供的数据库连接池，是集 DBCP 、C3P0 、Proxool 优点于一身的数据库连接池，性能、扩展性、易用性都更好，功能丰富</strong>。</li><li><strong>Hikari（ひかり[shi ga li]） 取自日语，是光的意思，是 SpringBoot2.x 之后内置的一款连接池，基于 BoneCP （已经放弃维护，推荐该连接池）做了不少的改进和优化，口号是快速、简单、可靠。</strong></li></ul><p>主流连接池的功能对比：</p><p><img src="`+h+'" alt="主流连接池的功能对比" loading="lazy"></p><p>Mock 性能数据（单位：ms）：</p><p>![Mock 性能数据](../assets/Mock 性能数据.png)</p><p>Mysql性能数据（单位：ms）：</p><p><img src="'+g+`" alt="Mysql性能数据" loading="lazy"></p><h3 id="_8-4-druid连接池使用" tabindex="-1"><a class="header-anchor" href="#_8-4-druid连接池使用"><span>8.4 Druid连接池使用</span></a></h3><p>使用步骤：</p><ul><li>引入 <code>jar</code> 包。</li><li>编码。</li></ul><p>硬编码方式（了解）：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHardCodeDruid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
   <span class="token comment">/*
      硬编码：将连接池的配置信息和 Java 代码耦合在一起。
      1、创建 DruidDataSource 连接池对象。
      2、设置连接池的配置信息【必须 | 非必须！】。
      3、通过连接池获取连接对象。
      4、回收连接【不是释放连接，而是将连接归还给连接池，给其他线程进行复用】。
   */</span>

   <span class="token comment">// 1.创建 DruidDataSource 连接池对象。</span>
   <span class="token class-name">DruidDataSource</span> druidDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 2.设置连接池的配置信息【必须 | 非必须！】。</span>
   <span class="token comment">// 2.1 必须设置的配置。</span>
   druidDataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   druidDataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql:///jdbc_demo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   druidDataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   druidDataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 2.2 非必须设置的配置。</span>
   druidDataSource<span class="token punctuation">.</span><span class="token function">setInitialSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   druidDataSource<span class="token punctuation">.</span><span class="token function">setMaxActive</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   
   <span class="token comment">// 3.通过连接池获取连接对象</span>
   <span class="token class-name">Connection</span> connection <span class="token operator">=</span> druidDataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 基于 Connection 进行 CRUD</span>

   <span class="token comment">// 4.回收连接。</span>
   connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>软编码方式（推荐）：</p><p>在项目目录下创建 <code>resources</code> 文件夹，然后右键标识该文件夹为资源目录，创建 <code>druid.properties</code> 配置文件，将连接信息定义在该文件中。</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment"># druid 连接池需要的配置参数，key 固定命名</span>
<span class="token key attr-name">driverClassName</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver</span>
<span class="token key attr-name">url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql:///jdbc_demo</span>
<span class="token key attr-name">username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>
<span class="token key attr-name">initialSize</span><span class="token punctuation">=</span><span class="token value attr-value">10</span>
<span class="token key attr-name">maxActive</span><span class="token punctuation">=</span><span class="token value attr-value">20</span>
</code></pre></div><p>Java 代码实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testResourcesDruid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
   <span class="token comment">// 1.创建 Properties 集合，用于存储外部配置文件的 key 和 value 值</span>
   <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 2.读取外部配置文件，获取输入流，加载到 Properties 集合里。</span>
   <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">DruidTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;druid.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 3.基于 Properties 集合构建 DruidDataSource 连接池</span>
   <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 4.通过连接池获取连接对象</span>
   <span class="token class-name">Connection</span> connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 5.开发 CRUD</span>

   <span class="token comment">// 6.回收连接</span>
   connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-5-druid其他配置【了解】" tabindex="-1"><a class="header-anchor" href="#_8-5-druid其他配置【了解】"><span>8.5 Druid其他配置【了解】</span></a></h3>`,96),E=n("thead",null,[n("tr",null,[n("th",null,"配置"),n("th",null,[n("strong",null,"缺省")]),n("th",null,[n("strong",null,"说明")])])],-1),B=n("tr",null,[n("td",null,"name"),n("td",null,"-"),n("td",null,"配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。 如果没有配置，将会生成一个名字，格式是：”DataSource-” + System.identityHashCode(this)")],-1),I=n("tr",null,[n("td",null,"jdbcUrl"),n("td",null,"-"),n("td",null,"连接数据库的url，不同数据库不一样。例如：mysql : jdbc:mysql://10.20.153.104:3306/druid2 oracle : jdbc:oracle:thin:@10.20.149.85:1521:ocnauto")],-1),T=n("tr",null,[n("td",null,"username"),n("td",null,"-"),n("td",null,"连接数据库的用户名")],-1),J=n("td",null,"password",-1),A=n("td",null,"-",-1),Q={href:"https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter",target:"_blank",rel:"noopener noreferrer"},P=n("tr",null,[n("td",null,"driverClassName"),n("td",null,"-"),n("td",null,"根据url自动识别 这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)")],-1),R=n("tr",null,[n("td",null,"initialSize"),n("td",null,"0"),n("td",null,"初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时")],-1),O=n("tr",null,[n("td",null,"maxActive"),n("td",null,"8"),n("td",null,"最大连接池数量")],-1),N=n("tr",null,[n("td",null,"maxIdle"),n("td",null,"8"),n("td",null,"已经不再使用，配置了也没效果")],-1),M=n("tr",null,[n("td",null,"minIdle"),n("td",null,"-"),n("td",null,"最小连接池数量")],-1),U=n("tr",null,[n("td",null,"maxWait"),n("td",null,"-"),n("td",null,"获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。")],-1),z=n("tr",null,[n("td",null,"poolPreparedStatements"),n("td",null,"false"),n("td",null,"是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。")],-1),H=n("tr",null,[n("td",null,"maxOpenPreparedStatements"),n("td",null,"-1"),n("td",null,"要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100")],-1),V=n("tr",null,[n("td",null,"validationQuery"),n("td",null,"-"),n("td",null,"用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。")],-1),F=n("tr",null,[n("td",null,"testOnBorrow"),n("td",null,"true"),n("td",null,"申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。")],-1),K=n("tr",null,[n("td",null,"testOnReturn"),n("td",null,"false"),n("td",null,"归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能")],-1),W=n("tr",null,[n("td",null,"testWhileIdle"),n("td",null,"false"),n("td",null,"建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。")],-1),G=n("tr",null,[n("td",null,"timeBetweenEvictionRunsMillis"),n("td",null,"-"),n("td",null,"有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明")],-1),Y=n("tr",null,[n("td",null,"numTestsPerEvictionRun"),n("td",null,"-"),n("td",null,"不再使用，一个DruidDataSource只支持一个EvictionRun")],-1),Z=n("tr",null,[n("td",null,"minEvictableIdleTimeMillis"),n("td",null,"-"),n("td",null,"-")],-1),X=n("tr",null,[n("td",null,"connectionInitSqls"),n("td",null,"-"),n("td",null,"物理连接初始化的时候执行的sql")],-1),$=n("tr",null,[n("td",null,"exceptionSorter"),n("td",null,"-"),n("td",null,"根据dbType自动识别 当数据库抛出一些不可恢复的异常时，抛弃连接")],-1),nn=n("tr",null,[n("td",null,"filters"),n("td",null,"-"),n("td",null,"属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall")],-1),sn=n("tr",null,[n("td",null,"proxyFilters"),n("td",null,"-"),n("td",null,"类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系")],-1),an=a(`<h3 id="_8-6-hikaricp连接池使用" tabindex="-1"><a class="header-anchor" href="#_8-6-hikaricp连接池使用"><span>8.6 HikariCP连接池使用</span></a></h3><p>使用步骤：</p><ul><li>引入 <code>jar</code> 包。</li><li>编码。</li></ul><p>硬编码方式（了解）：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHardCodeHikari</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
   <span class="token comment">/*
   硬编码：将连接池的配置信息和 Java 代码耦合在一起。
   1、创建 HikariDataSource 连接池对象。
   2、设置连接池的配置信息【必须 ｜ 非必须！】。
   3、通过连接池获取连接对象。
   4、回收连接。
   */</span>
   <span class="token comment">// 1.创建 HikariDataSource 连接池对象</span>
   <span class="token class-name">HikariDataSource</span> hikariDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HikariDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 2.设置连接池的配置信息【必须 ｜ 非必须！】</span>
   <span class="token comment">// 2.1 必须设置的配置</span>
   hikariDataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   hikariDataSource<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql:///jdbc_demo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   hikariDataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   hikariDataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 2.2 非必须设置的配置</span>
   hikariDataSource<span class="token punctuation">.</span><span class="token function">setMinimumIdle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   hikariDataSource<span class="token punctuation">.</span><span class="token function">setMaximumPoolSize</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 3.通过连接池获取连接对象</span>
   <span class="token class-name">Connection</span> connection <span class="token operator">=</span> hikariDataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 回收连接</span>
   connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>软编码方式（推荐）：</p><p>在项目目录下创建 <code>resources</code> 文件夹，然后右键标识该文件夹为资源目录，创建 <code>hikari.properties</code> 配置文件，将连接信息定义在该文件中。</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">driverClassName</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver</span>
<span class="token key attr-name">jdbcUrl</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql:///jdbc_demo</span>
<span class="token key attr-name">username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>
<span class="token key attr-name">minimumIdle</span><span class="token punctuation">=</span><span class="token value attr-value">10</span>
<span class="token key attr-name">maximumPoolSize</span><span class="token punctuation">=</span><span class="token value attr-value">20</span>
</code></pre></div><p>Java 代码实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testResourcesHikari</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
   <span class="token comment">// 1.创建 Properties 集合，用于存储外部配置文件的 key和 value 值。</span>
   <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 2.读取外部配置文件，获取输入流，加载到 Properties 集合里。</span>
   <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">HikariTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;hikari.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 3.创建 Hikari 连接池配置对象，将 Properties 集合传进去</span>
   <span class="token class-name">HikariConfig</span> hikariConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HikariConfig</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 4. 基于 Hikari 配置对象，构建连接池</span>
   <span class="token class-name">HikariDataSource</span> hikariDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HikariDataSource</span><span class="token punctuation">(</span>hikariConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 5. 获取连接</span>
   <span class="token class-name">Connection</span> connection <span class="token operator">=</span> hikariDataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;connection = &quot;</span> <span class="token operator">+</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 6.回收连接</span>
   connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-7-hikaricp其他配置【了解】" tabindex="-1"><a class="header-anchor" href="#_8-7-hikaricp其他配置【了解】"><span>8.7 HikariCP其他配置【了解】</span></a></h3><table><thead><tr><th>属性</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>isAutoCommit</td><td>true</td><td>自动提交从池中返回的连接</td></tr><tr><td>connectionTimeout</td><td>30000</td><td>等待来自池的连接的最大毫秒数</td></tr><tr><td>maxLifetime</td><td>1800000</td><td>池中连接最长生命周期如果不等于0且小于30秒则会被重置回30分钟</td></tr><tr><td>minimumIdle</td><td>10</td><td>池中维护的最小空闲连接数 minIdle&lt;0或者minIdle&gt;maxPoolSize，则被重置为maxPoolSize</td></tr><tr><td>maximumPoolSize</td><td>10</td><td>池中最大连接数，包括闲置和使用中的连接</td></tr><tr><td>metricRegistry</td><td>null</td><td>连接池的用户定义名称，主要出现在日志记录和JMX管理控制台中以识别池和池配置</td></tr><tr><td>healthCheckRegistry</td><td>null</td><td>报告当前健康信息</td></tr><tr><td>poolName</td><td>HikariPool-1</td><td>连接池的用户定义名称，主要出现在日志记录和JMX管理控制台中以识别池和池配置</td></tr><tr><td>idleTimeout</td><td>-</td><td>是允许连接在连接池中空闲的最长时间</td></tr></tbody></table><h2 id="九、jdbc优化及工具类封装" tabindex="-1"><a class="header-anchor" href="#九、jdbc优化及工具类封装"><span>九、JDBC优化及工具类封装</span></a></h2><h3 id="_9-1-现有问题" tabindex="-1"><a class="header-anchor" href="#_9-1-现有问题"><span>9.1 现有问题</span></a></h3><p>我们在使用 JDBC 的过程中，发现部分代码存在冗余的问题：</p><ul><li>创建连接池。</li><li>获取连接。</li><li>连接的回收。</li></ul><h3 id="_9-2-jdbc工具类封装v1-0" tabindex="-1"><a class="header-anchor" href="#_9-2-jdbc工具类封装v1-0"><span>9.2 JDBC工具类封装V1.0</span></a></h3><p>在项目目录下创建 <code>resources</code> 文件夹，然后右键标识该文件夹为资源目录，创建 <code>druid.properties</code> 配置文件，将连接信息定义在该文件中。</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment"># druid 连接池需要的配置参数，key 固定命名</span>
<span class="token key attr-name">driverClassName</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver</span>
<span class="token key attr-name">url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql:///jdbc_demo</span>
<span class="token key attr-name">username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>
<span class="token key attr-name">initialSize</span><span class="token punctuation">=</span><span class="token value attr-value">10</span>
<span class="token key attr-name">maxActive</span><span class="token punctuation">=</span><span class="token value attr-value">20</span>
</code></pre></div><p>Java 工具类代码实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSourceFactory</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
* JDBC工具类（V1.0）：
* 1、维护一个连接池对象。
* 2、对外提供在连接池中获取连接的方法。
* 3、对外提供回收连接的方法。
* 注意：工具类仅对外提供共性的功能代码，所以方法均为静态方法！
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCTools</span> <span class="token punctuation">{</span>
   <span class="token comment">// 创建连接池引用，因为要提供给当前项目全局使用，所以创建为静态的。</span>
   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span>
   <span class="token comment">// 在项目启动时，即创建连接池对象，赋值给 dataSource</span>
   <span class="token keyword">static</span><span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
         <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span>  <span class="token class-name">JDBCTools</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;druid.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
         dataSource <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
   <span class="token comment">// 对外提供获取连接的静态方法！</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// 对外提供回收连接的静态方法！</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> conn<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
      <span class="token comment">// 还给连接池</span>
      conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：此种封装方式，无法保证单个请求连接的线程，多次操作数据库时，连接是同一个，无法保证事务！</p><h3 id="_9-3-threadlocal" tabindex="-1"><a class="header-anchor" href="#_9-3-threadlocal"><span>9.3 ThreadLocal</span></a></h3><p>JDK 1.2 的版本中就提供 <code>java.lang.ThreadLocal</code> 为解决多线程程序的并发问题提供了一种新的思路。</p><p>使用这个工具类可以很简洁地编写出优美的多线程程序。</p><p>通常用来在多线程中管理共享数据库连接、Session 等。</p><p>ThreadLocal 用于保存某个线程共享变量，原因是在 Java 中，每一个线程对象中都有一个 <code>ThreadLocalMap&lt;ThreadLocal， Object&gt;</code>，其 key 就是一个 ThreadLocal，而 Object 即为该线程的共享变量。</p><p>而这个 <code>map</code> 是通过 ThreadLocal 的 <code>set</code> 和 <code>get</code> 方法操作的。</p><p>对于同一个 <code>static ThreadLocal</code>，不同线程只能从中 <code>get</code>、<code>set</code>、<code>remove</code> 自己的变量，而不会影响其他线程的变量。</p><ul><li>在进行对象跨层传递的时候，使用 ThreadLocal 可以避免多次传递，打破层次间的约束。</li><li>线程间数据隔离。</li><li>进行事务操作，用于存储线程事务信息。</li><li>数据库连接，<code>Session</code> 会话管理。</li></ul><ol><li><code>ThreadLocal对象.get()</code>：获取 ThreadLocal 中当前线程共享变量的值。</li><li><code>ThreadLocal对象.set()</code>： 设置 ThreadLocal 中当前线程共享变量的值。</li><li><code>ThreadLocal对象.remove()</code>：移除 ThreadLocal 中当前线程共享变量的值。</li></ol><p><img src="`+y+`" alt="ThreadLocal" loading="lazy"></p><h3 id="_9-4-jdbc工具类封装v2-0" tabindex="-1"><a class="header-anchor" href="#_9-4-jdbc工具类封装v2-0"><span>9.4 JDBC工具类封装V2.0</span></a></h3><p>在 V1.0 的版本基础上，我们将连接对象放在每个线程的 ThreadLocal 中，保证从头到尾当前线程操作的是同一连接对象。</p><p>Java 工具类代码实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>chenwenjing<span class="token punctuation">.</span>senior<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSourceFactory</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 *  JDBC 工具类（V2.0）：
 *      1、维护一个连接池对象、维护了一个线程绑定变量的 ThreadLocal 对象
 *      2、对外提供在 ThreadLocal 中获取连接的方法
 *      3、对外提供回收连接的方法，回收过程中，将要回收的连接从 ThreadLocal 中移除！
 *  注意：工具类仅对外提供共性的功能代码，所以方法均为静态方法！
 *  注意：使用 ThreadLocal 就是为了一个线程在多次数据库操作过程中，使用的是同一个连接！
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtilV2</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建连接池引用，因为要提供给当前项目的全局使用，所以创建为静态的。</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Connection</span><span class="token punctuation">&gt;</span></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 在项目启动时，即创建连接池对象，赋值给 dataSource</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">JDBCUtil</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;druid.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>

            dataSource <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 对外提供在连接池中获取连接的方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 在ThreadLocal中获取 Connection、</span>
            <span class="token class-name">Connection</span> connection <span class="token operator">=</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// threadLocal 里没有存储 Connection 也就是第一次获取</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 在连接池中获取一个连接，存储在 threadLocal 里。</span>
                connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> connection<span class="token punctuation">;</span>

        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 对外提供回收连接的方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Connection</span> connection <span class="token operator">=</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>connection<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">// 从 threadLocal 中移除当前已经存储的 Connection 对象</span>
                threadLocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 如果开启了事务的手动提交，操作完毕后，归还给连接池之前，要将事务的自动提交改为 true</span>
                connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 将 Connection 对象归还给连接池</span>
                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十、dao封装及basedao工具类" tabindex="-1"><a class="header-anchor" href="#十、dao封装及basedao工具类"><span>十、DAO封装及BaseDAO工具类</span></a></h2><h3 id="_10-1-dao概念" tabindex="-1"><a class="header-anchor" href="#_10-1-dao概念"><span>10.1 DAO概念</span></a></h3><p>DAO（Data Access Object）数据访问对象。</p><p>Java 是面向对象语言，数据在 Java 中通常以对象的形式存在。</p><p>一张表对应一个实体类，一张表的操作对应一个 DAO 对象。</p><p>在 Java 操作数据库时，我们会将对同一张表的增删改查操作统一维护起来，维护的这个类就是 DAO 层。</p><p>DAO 层只关注对数据库的操作，供业务层 Service 调用，将职责划分清楚。</p><h3 id="_10-2-basedao概念" tabindex="-1"><a class="header-anchor" href="#_10-2-basedao概念"><span>10.2 BaseDAO概念</span></a></h3><p>基本上每一个数据表都应该有一个对应的 DAO 接口及其实现类，发现对所有表的操作（增、删、改、查）代码重复度很高，所以可以抽取公共代码，给这些 DAO 的实现类可以抽取一个公共的父类，复用增删改查的基本操作，我们称为 BaseDAO。</p><h3 id="_10-3-basedao搭建" tabindex="-1"><a class="header-anchor" href="#_10-3-basedao搭建"><span>10.3 BaseDAO搭建</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseDAO</span> <span class="token punctuation">{</span>
    <span class="token comment">/*
      通用的增、删、改的方法
      String sql：sql
      Object... args：给 sql 中的 ? 设置的值列表，可以是 0~n
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token comment">//  创建 PreparedStatement 对象，对 sql 预编译</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">JDBCTools</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置 ? 占位符的值</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>args <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> args<span class="token punctuation">.</span>length<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ? 的编号从 1 开始，不是从 0 开始，数组的下标是从 0 开始</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 执行 sql</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 这里检查下是否开启事务，开启不关闭连接，业务方法关闭</span>
        <span class="token comment">// connection.getAutoCommit() 为 false，不要在这里回收 connection，由开启事务的地方回收</span>
        <span class="token comment">// connection.getAutoCommit() 为 true，正常回收连接</span>
        <span class="token comment">// 没有开启事务的话，直接回收关闭即可</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">getAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 回收</span>
            <span class="token class-name">JDBCTools</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> len<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/*
      通用的查询多个 Javabean 对象的方法，例如：多个员工对象，多个部门对象等
      这里的 clazz 接收的是T类型的 Class 对象，
      如果查询员工信息，clazz 代表 Employee.class，
      如果查询部门信息，clazz 代表 Department.class，
      返回 List&lt;T&gt; list
     */</span>
    <span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建 PreparedStatemen t对象，对 sql 预编译</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">JDBCTools</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置 ? 的值</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>args <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> args<span class="token punctuation">.</span>length<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ? 的编号从 1 开始，不是从 0 开始，数组的下标是从 0 开始</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ResultSet</span> res <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/*
          获取结果集的元数据对象
          元数据对象中有该结果集一共有几列、列名称是什么等信息
         */</span>
        <span class="token class-name">ResultSetMetaData</span> metaData <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> columnCount <span class="token operator">=</span> metaData<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取结果集列数</span>

        <span class="token comment">// 遍历结果集 ResultSet，把查询结果中的一条一条记录，变成一个一个 T 对象，放到 list 中。</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 循环一次代表有一行，代表有一个 T 对象</span>
            <span class="token class-name">T</span> t <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 要求这个类型必须有公共的无参构造</span>

            <span class="token comment">// 把这条记录的每一个单元格的值取出来，设置到 t 对象对应的属性中</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>columnCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">// for 循环一次，代表取某一行的 1 个单元格的值</span>
                <span class="token class-name">Object</span> value <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 这个值应该是 t 对象的某个属性值</span>
                <span class="token comment">// 获取该属性对应的 Field 对象</span>
                <span class="token comment">// String columnName = metaData.getColumnName(i); // 获取第 i 列的字段名</span>
                <span class="token comment">// 这里再取别名可能没办法对应上</span>
                <span class="token class-name">String</span> columnName <span class="token operator">=</span> metaData<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取第 i 列的字段名或字段的别名</span>
                <span class="token class-name">Field</span> field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这么做可以操作 private 的属性</span>

                field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        res<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 这里检查下是否开启事务，开启不关闭连接，业务方法关闭</span>
        <span class="token comment">// 没有开启事务的话，直接回收关闭即可</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">getAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 回收</span>
            <span class="token class-name">JDBCTools</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">queryBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> sql<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-4-basedao的应用" tabindex="-1"><a class="header-anchor" href="#_10-4-basedao的应用"><span>10.4 BaseDAO的应用</span></a></h3><h4 id="_10-4-1-创建员工dao接口" tabindex="-1"><a class="header-anchor" href="#_10-4-1-创建员工dao接口"><span>10.4.1 创建员工DAO接口</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>chenwenjing<span class="token punctuation">.</span>senior<span class="token punctuation">.</span>dao</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>chenwenjing<span class="token punctuation">.</span>senior<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Employee</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * EmployeeDao 这个类对应的是 t_emp 这张表的增删改查的操作
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeDao</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 数据库对应的查询所有的操作
     * <span class="token keyword">@return</span> 表中所有的数据
     */</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 数据库对应的根据 empId 查询单个员工数据操作
     * <span class="token keyword">@param</span> <span class="token parameter">empId</span> 主键列
     * <span class="token keyword">@return</span> 一个员工对象（一行数据）
     */</span>
    <span class="token class-name">Employee</span> <span class="token function">selectByEmpId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> empId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 数据库对应的新增一条员工数据
     * <span class="token keyword">@param</span> <span class="token parameter">employee</span> ORM 思想中的一个员工对象
     * <span class="token keyword">@return</span> 受影响的行数
     */</span>
    <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 数据库对应的修改一条员工数据
     * <span class="token keyword">@param</span> <span class="token parameter">employee</span> ORM 思想中的一个员工对象
     * <span class="token keyword">@return</span> 受影响的行数
     */</span>
    <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 数据库对应的根据 empId 删除一条员工数据
     * <span class="token keyword">@param</span> <span class="token parameter">empId</span> 主键列
     * <span class="token keyword">@return</span> 受影响的行数
     */</span>
    <span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> empId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-4-2-创建员工dao接口实现类" tabindex="-1"><a class="header-anchor" href="#_10-4-2-创建员工dao接口实现类"><span>10.4.2 创建员工DAO接口实现类</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>chenwenjing<span class="token punctuation">.</span>senior<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>chenwenjing<span class="token punctuation">.</span>senior<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">BaseDAO</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>chenwenjing<span class="token punctuation">.</span>senior<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">EmployeeDao</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>chenwenjing<span class="token punctuation">.</span>senior<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Employee</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeDaoImpl</span> <span class="token keyword">extends</span> <span class="token class-name">BaseDAO</span> <span class="token keyword">implements</span> <span class="token class-name">EmployeeDao</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;SELECT emp_id empId,emp_name empName,emp_salary empSalary,emp_age empAge FROM t_emp&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>sql<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Employee</span> <span class="token function">selectByEmpId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> empId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;SELECT emp_id empId,emp_name empName,emp_salary empSalary,emp_age empAge FROM t_emp where emp_id = ?&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">executeQueryBean</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>sql<span class="token punctuation">,</span>empId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;INSERT INTO t_emp(emp_name,emp_salary,emp_age) VALUES (?,?,?)&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>employee<span class="token punctuation">.</span><span class="token function">getEmpName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>employee<span class="token punctuation">.</span><span class="token function">getEmpSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>employee<span class="token punctuation">.</span><span class="token function">getEmpAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;UPDATE t_emp SET emp_salary = ? WHERE emp_id = ?&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>employee<span class="token punctuation">.</span><span class="token function">getEmpSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>employee<span class="token punctuation">.</span><span class="token function">getEmpId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> empId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;delete from t_emp where emp_id = ?&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>empId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十一、事物" tabindex="-1"><a class="header-anchor" href="#十一、事物"><span>十一、事物</span></a></h2><h3 id="_11-1-事务回顾" tabindex="-1"><a class="header-anchor" href="#_11-1-事务回顾"><span>11.1 事务回顾</span></a></h3><ul><li>数据库事务就是一种 SQL 语句执行的缓存机制，不会单条执行完毕就更新数据库数据，最终根据缓存内的多条语句执行结果统一判定。</li><li>一个事务内所有语句都成功及事务成功，我们可以触发 <code>commit</code> 提交事务来结束事务，更新数据。</li><li>一个事务内任意一条语句失败，即为事务失败，我们可以触发 <code>rollback</code> 回滚结束事务，数据回到事务之前状态。</li><li>一个业务涉及多条修改数据库语句： <ul><li>经典的转账案例，转账业务（A账户减钱和B账户加钱，要一起成功）。</li><li>批量删除（涉及多个删除）。</li><li>批量添加（涉及多个插入）。</li></ul></li><li>事务的特性： <ol><li>原子性（Atomicity）原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生， 要么都不发生。</li><li>一致性（Consistency）事务必须使数据库从一个一致性状态变换到另外一个一致性状态。</li><li>隔离性（Isolation）事务的隔离性是指一个事务的执行不能被其他事务干扰， 即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</li><li>持久性（Durability）持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</li></ol></li><li>事务的提交方式： <ul><li>自动提交：每条语句自动存储一个事务中，执行成功自动提交，执行失败自动回滚。</li><li>手动提交: 手动开启事务，添加语句，手动提交或者手动回滚即可。</li></ul></li></ul><h3 id="_11-2-jdbc中事务实现" tabindex="-1"><a class="header-anchor" href="#_11-2-jdbc中事务实现"><span>11.2 JDBC中事务实现</span></a></h3><p>关键部分的代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">{</span>
    connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭自动提交了</span>
    <span class="token comment">// connection.setAutoCommit(false) 也就类型于 SET autocommit = off</span>
    
    <span class="token comment">// 注意：只要当前 connection 对象，进行数据库操作，都不会自动提交事务</span>
    <span class="token comment">// 数据库动作!</span>
    <span class="token comment">// prepareStatement - 单一的数据库动作 c r u d </span>
    <span class="token comment">// connection - 操作事务 </span>
    
    <span class="token comment">// 所有操作执行正确，提交事务</span>
    connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Execption</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 出现异常，则回滚事务</span>
    connection<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-3-jdbc事务代码实现" tabindex="-1"><a class="header-anchor" href="#_11-3-jdbc事务代码实现"><span>11.3 JDBC事务代码实现</span></a></h3><ol><li><p>准备数据库表及数据：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 继续在 jdbc_demo 的库中创建银行表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_bank<span class="token punctuation">(</span>
   id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;账号主键&#39;</span><span class="token punctuation">,</span>
   account <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;账号&#39;</span><span class="token punctuation">,</span>
   money  <span class="token keyword">INT</span> <span class="token keyword">UNSIGNED</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;金额，不能为负值&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
   
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_bank<span class="token punctuation">(</span>account<span class="token punctuation">,</span>money<span class="token punctuation">)</span> <span class="token keyword">VALUES</span>
  <span class="token punctuation">(</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>DAO 接口代码：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BankDao</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">addMoney</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span><span class="token class-name">Integer</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> <span class="token function">subMoney</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span><span class="token class-name">Integer</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></li><li><p>DAO 实现类代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BankDaoImpl</span>  <span class="token keyword">extends</span> <span class="token class-name">BaseDao</span> <span class="token keyword">implements</span> <span class="token class-name">BankDao</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addMoney</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span><span class="token class-name">Integer</span> money<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;update t_bank set money = money + ? where id = ? &quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>money<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">subMoney</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span><span class="token class-name">Integer</span> money<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;update t_bank set money = money - ? where id = ? &quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>money<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>测试代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Test</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token class-name">BankDao</span> bankDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BankDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">Connection</span> connection<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
       <span class="token keyword">try</span> <span class="token punctuation">{</span>
           <span class="token comment">// 1.获取连接，将连接的事务提交改为手动提交</span>
           connection <span class="token operator">=</span> <span class="token class-name">JDBCUtilV2</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开启事务，当前连接的自动提交关闭。改为手动提交</span>
  
           <span class="token comment">// 2.操作减钱</span>
           bankDao<span class="token punctuation">.</span><span class="token function">subMoney</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
           <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
  
           <span class="token comment">// 3.操作加钱</span>
           bankDao<span class="token punctuation">.</span><span class="token function">addMoney</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
           <span class="token comment">// 4.前置的多次 Dao 操作，没有异常，提交事务</span>
           connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">try</span> <span class="token punctuation">{</span>
               connection<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
       <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
           <span class="token class-name">JDBCUtilV2</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>注意：当开启事务后，切记一定要根据代码执行结果来决定是否提交或回滚，否则数据库看不到数据的操作结果！</p>`,61);function tn(en,pn){const t=c("ExternalLinkIcon");return o(),l("div",null,[w,i(" more "),_,n("ol",null,[f,n("li",null,[n("a",q,[s("官网下载"),e(t)]),s("数据库连接驱动 "),j,s(" 包。")]),D,C,x]),L,n("table",null,[E,n("tbody",null,[B,I,T,n("tr",null,[J,A,n("td",null,[s("连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里："),n("a",Q,[s("https://github.com/alibaba/druid/wiki/使用ConfigFilter"),e(t)])])]),P,R,O,N,M,U,z,H,V,F,K,W,G,Y,Z,X,$,nn,sn])]),an])}const ln=p(S,[["render",tn],["__file","index.html.vue"]]),un=JSON.parse('{"path":"/notes/mysql/jdbc/","title":"JDBC","lang":"zh-CN","frontmatter":{"title":"JDBC","icon":"Code","category":["JDBC","MySQL"],"timeline":true,"star":true,"description":"此处是一些 JDBC 的核心知识。 一、引言 1.1 数据的存储 我们在开发 Java 程序时，数据都是存储都是在内存中，属于临时存储，当程序停止或重启时，内存中的数据就丢失了！ 我们为了解决数据的长期存储问题，有如下解决方案： 数据通过 I/O 流技术，存储在本地磁盘中，解决了持久化问题，但是没有结构和逻辑，不方便管理和维护。 通过关系型数据库，将数...","head":[["meta",{"property":"og:url","content":"https://SuperChenWenjing.github.io/notes/mysql/jdbc/"}],["meta",{"property":"og:site_name","content":"陈文景"}],["meta",{"property":"og:title","content":"JDBC"}],["meta",{"property":"og:description","content":"此处是一些 JDBC 的核心知识。 一、引言 1.1 数据的存储 我们在开发 Java 程序时，数据都是存储都是在内存中，属于临时存储，当程序停止或重启时，内存中的数据就丢失了！ 我们为了解决数据的长期存储问题，有如下解决方案： 数据通过 I/O 流技术，存储在本地磁盘中，解决了持久化问题，但是没有结构和逻辑，不方便管理和维护。 通过关系型数据库，将数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-13T07:38:26.000Z"}],["meta",{"property":"article:author","content":"陈文景"}],["meta",{"property":"article:modified_time","content":"2024-04-13T07:38:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JDBC\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-13T07:38:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"陈文景\\",\\"email\\":\\"2646530197@qq.com\\",\\"url\\":\\"https://superchenwenjing.github.io\\"}]}"]],"date":"2024-04-13T00:22:38.000Z"},"headers":[{"level":2,"title":"一、引言","slug":"一、引言","link":"#一、引言","children":[{"level":3,"title":"1.1 数据的存储","slug":"_1-1-数据的存储","link":"#_1-1-数据的存储","children":[]},{"level":3,"title":"1.2 数据的操作","slug":"_1-2-数据的操作","link":"#_1-2-数据的操作","children":[]}]},{"level":2,"title":"二、JDBC","slug":"二、jdbc","link":"#二、jdbc","children":[{"level":3,"title":"2.1 JDBC的概念","slug":"_2-1-jdbc的概念","link":"#_2-1-jdbc的概念","children":[]},{"level":3,"title":"2.2 JDBC的核心组成","slug":"_2-2-jdbc的核心组成","link":"#_2-2-jdbc的核心组成","children":[]}]},{"level":2,"title":"三、JDBC快速入门","slug":"三、jdbc快速入门","link":"#三、jdbc快速入门","children":[{"level":3,"title":"3.1 JDBC搭建步骤","slug":"_3-1-jdbc搭建步骤","link":"#_3-1-jdbc搭建步骤","children":[]},{"level":3,"title":"3.2 代码实现","slug":"_3-2-代码实现","link":"#_3-2-代码实现","children":[]}]},{"level":2,"title":"四、核心API理解","slug":"四、核心api理解","link":"#四、核心api理解","children":[{"level":3,"title":"4.1 注册驱动","slug":"_4-1-注册驱动","link":"#_4-1-注册驱动","children":[]},{"level":3,"title":"4.2 Connection","slug":"_4-2-connection","link":"#_4-2-connection","children":[]},{"level":3,"title":"4.3 Statement","slug":"_4-3-statement","link":"#_4-3-statement","children":[]},{"level":3,"title":"4.4 PreparedStatement","slug":"_4-4-preparedstatement","link":"#_4-4-preparedstatement","children":[]},{"level":3,"title":"4.5 ResultSet","slug":"_4-5-resultset","link":"#_4-5-resultset","children":[]}]},{"level":2,"title":"五、基于PreparedStatement实现CRUD","slug":"五、基于preparedstatement实现crud","link":"#五、基于preparedstatement实现crud","children":[{"level":3,"title":"5.1 查询单行单列","slug":"_5-1-查询单行单列","link":"#_5-1-查询单行单列","children":[]},{"level":3,"title":"5.2 查询单行多列","slug":"_5-2-查询单行多列","link":"#_5-2-查询单行多列","children":[]},{"level":3,"title":"5.3 查询多行多列","slug":"_5-3-查询多行多列","link":"#_5-3-查询多行多列","children":[]},{"level":3,"title":"5.4 新增","slug":"_5-4-新增","link":"#_5-4-新增","children":[]},{"level":3,"title":"5.5 修改","slug":"_5-5-修改","link":"#_5-5-修改","children":[]},{"level":3,"title":"5.6 删除","slug":"_5-6-删除","link":"#_5-6-删除","children":[]}]},{"level":2,"title":"六、常见问题","slug":"六、常见问题","link":"#六、常见问题","children":[{"level":3,"title":"6.1 资源的管理","slug":"_6-1-资源的管理","link":"#_6-1-资源的管理","children":[]},{"level":3,"title":"6.2  SQL语句问题","slug":"_6-2-sql语句问题","link":"#_6-2-sql语句问题","children":[]},{"level":3,"title":"6.3 SQL语句未设置参数问题","slug":"_6-3-sql语句未设置参数问题","link":"#_6-3-sql语句未设置参数问题","children":[]},{"level":3,"title":"6.4 用户名或密码错误问题","slug":"_6-4-用户名或密码错误问题","link":"#_6-4-用户名或密码错误问题","children":[]},{"level":3,"title":"6.5 通信异常","slug":"_6-5-通信异常","link":"#_6-5-通信异常","children":[]}]},{"level":2,"title":"七、JDBC扩展","slug":"七、jdbc扩展","link":"#七、jdbc扩展","children":[{"level":3,"title":"7.1 实体类和ORM","slug":"_7-1-实体类和orm","link":"#_7-1-实体类和orm","children":[]},{"level":3,"title":"7.2 主键回显","slug":"_7-2-主键回显","link":"#_7-2-主键回显","children":[]},{"level":3,"title":"7.3 批量操作","slug":"_7-3-批量操作","link":"#_7-3-批量操作","children":[]}]},{"level":2,"title":"八、连接池","slug":"八、连接池","link":"#八、连接池","children":[{"level":3,"title":"8.1 现有问题","slug":"_8-1-现有问题","link":"#_8-1-现有问题","children":[]},{"level":3,"title":"8.2 连接池","slug":"_8-2-连接池","link":"#_8-2-连接池","children":[]},{"level":3,"title":"8.3 常见连接池","slug":"_8-3-常见连接池","link":"#_8-3-常见连接池","children":[]},{"level":3,"title":"8.4 Druid连接池使用","slug":"_8-4-druid连接池使用","link":"#_8-4-druid连接池使用","children":[]},{"level":3,"title":"8.5 Druid其他配置【了解】","slug":"_8-5-druid其他配置【了解】","link":"#_8-5-druid其他配置【了解】","children":[]},{"level":3,"title":"8.6 HikariCP连接池使用","slug":"_8-6-hikaricp连接池使用","link":"#_8-6-hikaricp连接池使用","children":[]},{"level":3,"title":"8.7 HikariCP其他配置【了解】","slug":"_8-7-hikaricp其他配置【了解】","link":"#_8-7-hikaricp其他配置【了解】","children":[]}]},{"level":2,"title":"九、JDBC优化及工具类封装","slug":"九、jdbc优化及工具类封装","link":"#九、jdbc优化及工具类封装","children":[{"level":3,"title":"9.1 现有问题","slug":"_9-1-现有问题","link":"#_9-1-现有问题","children":[]},{"level":3,"title":"9.2 JDBC工具类封装V1.0","slug":"_9-2-jdbc工具类封装v1-0","link":"#_9-2-jdbc工具类封装v1-0","children":[]},{"level":3,"title":"9.3 ThreadLocal","slug":"_9-3-threadlocal","link":"#_9-3-threadlocal","children":[]},{"level":3,"title":"9.4 JDBC工具类封装V2.0","slug":"_9-4-jdbc工具类封装v2-0","link":"#_9-4-jdbc工具类封装v2-0","children":[]}]},{"level":2,"title":"十、DAO封装及BaseDAO工具类","slug":"十、dao封装及basedao工具类","link":"#十、dao封装及basedao工具类","children":[{"level":3,"title":"10.1 DAO概念","slug":"_10-1-dao概念","link":"#_10-1-dao概念","children":[]},{"level":3,"title":"10.2 BaseDAO概念","slug":"_10-2-basedao概念","link":"#_10-2-basedao概念","children":[]},{"level":3,"title":"10.3 BaseDAO搭建","slug":"_10-3-basedao搭建","link":"#_10-3-basedao搭建","children":[]},{"level":3,"title":"10.4 BaseDAO的应用","slug":"_10-4-basedao的应用","link":"#_10-4-basedao的应用","children":[]}]},{"level":2,"title":"十一、事物","slug":"十一、事物","link":"#十一、事物","children":[{"level":3,"title":"11.1 事务回顾","slug":"_11-1-事务回顾","link":"#_11-1-事务回顾","children":[]},{"level":3,"title":"11.2 JDBC中事务实现","slug":"_11-2-jdbc中事务实现","link":"#_11-2-jdbc中事务实现","children":[]},{"level":3,"title":"11.3 JDBC事务代码实现","slug":"_11-3-jdbc事务代码实现","link":"#_11-3-jdbc事务代码实现","children":[]}]}],"git":{"createdTime":1712967758000,"updatedTime":1712993906000,"contributors":[{"name":"陈文景","email":"2646530197@qq.com","commits":2}]},"readingTime":{"minutes":33.32,"words":9996},"filePathRelative":"notes/mysql/jdbc/README.md","localizedDate":"2024年4月13日","excerpt":"<p>此处是一些 JDBC 的核心知识。</p>\\n","autoDesc":true}');export{ln as comp,un as data};
