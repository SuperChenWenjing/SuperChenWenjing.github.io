import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as l,c as a,b as p,d as e,a as i,w as o,f as d,e as n}from"./app-BkI4cO3i.js";const r="/assets/Redisson 实现的分布式锁可重入原理-CkeVfvfQ.png",u={},h=e("div",{class:"hint-container note"},[e("p",{class:"hint-container-title"},"注"),e("p",null,"此处是一些 Redis 高频面试题（持续更新中...）。")],-1),m=e("h2",{id:"目录",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#目录"},[e("span",null,"目录")])],-1),R=d('<h2 id="面试题汇总" tabindex="-1"><a class="header-anchor" href="#面试题汇总"><span>面试题汇总</span></a></h2><div class="hint-container info"><p class="hint-container-title">你在最近的项目中哪些场景使用了 Redis 呢？</p><blockquote><p>Redis 的使用场景有哪些。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">如果发生了缓存穿透、缓存击穿、缓存雪崩该如何解决？</p><blockquote><p>缓存穿透、缓存击穿、缓存雪崩产生的原因以及解决方案有哪些。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">如何保证 Redis 的双写一致性。</p><blockquote><p>保证双写一致性的方案有哪些。</p><p>每个方案的优缺点是什么（一致性要求高、允许延迟一致）。</p><p>衍生问题：</p><ol><li>先删缓存再更新数据库，还是先更新数据库再删缓存？</li><li>为什么不使用延迟双删？</li></ol></blockquote></div><div class="hint-container info"><p class="hint-container-title">Redis 的数据持久化是怎么做的？</p><blockquote><p>RDB、AOF。</p><p>AOF 的刷盘策略、命令重写。</p><p>这两种模式哪个恢复得更快。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">Redis 的数据过期策略。</p><blockquote><p>惰性删除、定期删除（SLOW、FAST）。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">Redis 的内存淘汰策略。</p><blockquote><p>有 8 种。</p><p>默认的淘汰策略是什么。</p><p>开发中最常使用的是什么策略。</p><p>LRU（Least Recently Used）淘汰<strong>最近最少使用</strong>的 Key。</p><p>LFU（Least Frequently Used）淘汰<strong>最少频率使用</strong>的 Key。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">Redis 的分布式锁是如何实现的？</p><blockquote><p>根据业务场景回答（比如：抢券业务）。</p><p><code>setnx</code> 命令（set if not exists）和 <code>lua</code> 脚本（原子性）。</p><p>看门狗机制（Watch dog）。</p><p>锁的续期（releaseTime / 3）。</p><p><code>while</code> 循环，不断尝试获取锁，达到一定次数未获得锁后才返回失败。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">Redisson 实现的分布式锁可重入吗？</p><blockquote><p>利用 <code>hash</code> 结构记录线程 <code>id</code> 和重入次数。</p><img src="'+r+'" alt="image-20240503235607166" style="zoom:50%;"></blockquote></div><div class="hint-container info"><p class="hint-container-title">Redisson 实现的分布式锁能解决主从一致性的问题吗？</p><blockquote><p>不能。</p><p>Redisson 红锁（性能低）。</p><p>zookeeper（保证数据的强一致性）。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">Redis 集群有哪些方案？</p><blockquote><p>主从复制。</p><p>哨兵模式。</p><p>分片集群。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">Redis 主从数据同步的流程是什么？</p><blockquote><p>全量同步。</p><p>增量同步。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">如何保证 Redis 的高可用？</p><blockquote><p>集群。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">Redis 分片集群中的数据是怎么存储和读取的？</p><blockquote><p>Redis 集群有 16384 个哈希槽。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">Redis 集群脑裂问题该怎么解决？</p><blockquote><p>不同的网络分区。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">Redis 是单线程的为什么那么快？</p><blockquote><p>Redis 是纯内存操作，执行速度非常快。</p><p>采用单线程，避免不必要的上下文切换可竞争条件，多线程还要考虑线程安全问题。</p><p>使用 I/O 多路复用模型，非阻塞 IO。</p></blockquote></div><div class="hint-container info"><p class="hint-container-title">能解释一下 I/O 多路复用模型？</p><blockquote><p>Redis是纯内存操作，执行速度非常快，它的性能瓶颈是<strong>网络延迟</strong>而不是执行速度， I/O 多路复用模型主要就是实现了高效的网络请求。</p><ul><li>用户空间和内核空间。</li><li>常见的IO模型： <ul><li>阻塞IO（Blocking IO）。</li><li>非阻塞IO（Nonblocking IO）。</li><li>IO多路复用（IO Multiplexing）。</li></ul></li><li>Redis 网络模型。</li></ul></blockquote></div>',17);function k(v,b){const t=c("RouteLink");return l(),a("div",null,[h,p(" more "),m,e("ul",null,[e("li",null,[i(t,{to:"/audition/redis/core/"},{default:o(()=>[n("基础篇")]),_:1})]),e("li",null,[i(t,{to:"/audition/redis/clusters/"},{default:o(()=>[n("集群篇")]),_:1})])]),R])}const g=s(u,[["render",k],["__file","index.html.vue"]]),_=JSON.parse('{"path":"/audition/redis/","title":"Redis","lang":"zh-CN","frontmatter":{"title":"Redis","icon":"Redis","category":"面试题","tag":"面试题","timeline":true,"star":true,"description":" 注 此处是一些 Redis 高频面试题（持续更新中...）。 目录 面试题汇总 你在最近的项目中哪些场景使用了 Redis 呢？ Redis 的使用场景有哪些。 如果发生了缓存穿透、缓存击穿、缓存雪崩该如何解决？ 缓存穿透、缓存击穿、缓存雪崩产生的原因以及解决方案有哪些。 如何保证 Redis 的双写一致性。 保证双写一致性的方案有哪些。 每个方案的...","head":[["meta",{"property":"og:url","content":"https://SuperChenWenjing.github.io/audition/redis/"}],["meta",{"property":"og:site_name","content":"陈文景"}],["meta",{"property":"og:title","content":"Redis"}],["meta",{"property":"og:description","content":" 注 此处是一些 Redis 高频面试题（持续更新中...）。 目录 面试题汇总 你在最近的项目中哪些场景使用了 Redis 呢？ Redis 的使用场景有哪些。 如果发生了缓存穿透、缓存击穿、缓存雪崩该如何解决？ 缓存穿透、缓存击穿、缓存雪崩产生的原因以及解决方案有哪些。 如何保证 Redis 的双写一致性。 保证双写一致性的方案有哪些。 每个方案的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-03T16:09:36.000Z"}],["meta",{"property":"article:author","content":"陈文景"}],["meta",{"property":"article:tag","content":"面试题"}],["meta",{"property":"article:modified_time","content":"2024-05-03T16:09:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-03T16:09:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"陈文景\\",\\"email\\":\\"2646530197@qq.com\\",\\"url\\":\\"https://superchenwenjing.github.io\\"}]}"]],"date":"2024-03-08T16:03:07.000Z"},"headers":[{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"面试题汇总","slug":"面试题汇总","link":"#面试题汇总","children":[]}],"git":{"createdTime":1709913787000,"updatedTime":1714752576000,"contributors":[{"name":"陈文景","email":"2646530197@qq.com","commits":5}]},"readingTime":{"minutes":2.62,"words":787},"filePathRelative":"audition/redis/README.md","localizedDate":"2024年3月8日","excerpt":"<div class=\\"hint-container note\\">\\n<p class=\\"hint-container-title\\">注</p>\\n<p>此处是一些 Redis 高频面试题（持续更新中...）。</p>\\n</div>\\n","autoDesc":true}');export{g as comp,_ as data};
