import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as c,c as l,b as r,d as a,e as n,a as e,f as s}from"./app-BkI4cO3i.js";const i="/assets/primitive-type-vs-packaging-type-ByVGaOm_.png",d={},u=a("p",null,"此处是一些 Java 基础的高频面试题（持续更新中...）。",-1),k=s('<h2 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法"><span>基础语法</span></a></h2><h3 id="java-中的注释有哪几种形式" tabindex="-1"><a class="header-anchor" href="#java-中的注释有哪几种形式"><span><span style="color:#fb9b5f;">Java 中的注释有哪几种形式？</span></span></a></h3><p>单行注释：通常用于解释方法内某单行代码的作用。</p><p>多行注释：通常用于解释一段代码的作用。</p><p>文档注释：通常用于生成 Java 开发文档。</p><h3 id="标识符和关键字的区别是什么" tabindex="-1"><a class="header-anchor" href="#标识符和关键字的区别是什么"><span><span style="color:#fb9b5f;">标识符和关键字的区别是什么？</span></span></a></h3><p>在我们编写程序的时候，需要大量地为程序、类、变量、方法等取名字，于是就有了<strong>标识符</strong>。</p><blockquote><p>简单来说：标识符就是一个名字 。</p></blockquote><p>有一些标识符，Java 语言已经赋予了其特殊的含义，只能用于特定的地方，这些特殊的标识符就是<strong>关键字</strong> 。</p><blockquote><p>简单来说：关键字是被赋予了特殊含义的标识符 。</p></blockquote><h3 id="java-语言关键字有哪些" tabindex="-1"><a class="header-anchor" href="#java-语言关键字有哪些"><span><span style="color:#fb9b5f;">Java 语言关键字有哪些？</span></span></a></h3><p>访问控制类：private、protected、public。</p><p>类/方法和变量修饰符：abstract、class、extends、final、implements、interface、native、new、static、strictfp、synchronized、transient、volatile、enum。</p><p>程序控制：break、continue、return、do、while、if、else、for、instanceof、switch、case、default、assert。</p><p>错误处理：try、catch、finally、throw、throws。</p><p>包相关：import、package。</p><p>基本类型：boolean、byte、char、double、float、int、long、short。</p><p>变量引用：super、this、void。</p><p>保留字：goto、const。</p>',19),h={href:"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html",target:"_blank",rel:"noopener noreferrer"},m=a("p",null,[a("strong",null,"注意"),n("：虽然 "),a("code",null,"true"),n("、"),a("code",null,"false"),n("和 "),a("code",null,"null"),n(" 看起来像关键字，但实际上他们是字面值，同时你也不可以作为标识符来使用。")],-1),b=s('<h3 id="continue、break、return-的区别是什么" tabindex="-1"><a class="header-anchor" href="#continue、break、return-的区别是什么"><span><span style="color:#fb9b5f;"><code>continue</code>、<code>break</code>、<code>return</code> 的区别是什么？</span></span></a></h3><p>在循环结构中，当循环条件不满足或者循环次数没有达到要求时，循环会正常结束。</p><p>但是，有时候可能需要在循环的过程中，当发生了某种条件之后 ，提前终止循环。</p><p>这就需要用到下面几个关键词：</p><ol><li><code>continue</code>：指跳出当前的这一次循环，继续下一次循环。</li><li><code>break</code>：指跳出整个循环体，继续执行循环下面的语句。</li><li><code>return</code> 用于跳出所在的方法，结束该方法的运行（有两种不同的用法）。 <ol><li><code>return;</code>：直接使用结束方法的执行，用于没有返回值函数的方法。</li><li><code>return value;</code>：返回一个特定的值，用于有返回值函数的方法。</li></ol></li></ol><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><h3 id="java-中的几种基本数据类型了解么" tabindex="-1"><a class="header-anchor" href="#java-中的几种基本数据类型了解么"><span><span style="color:#fb9b5f;">Java 中的几种基本数据类型了解么？</span></span></a></h3><p>Java 中有 8 种基本数据类型。</p><ul><li>6 种数字类型： <ul><li>4 种整数型：<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>。</li><li>2 种浮点型：<code>float</code>、<code>double</code>。</li></ul></li><li>1 种字符类型：<code>char</code>。</li><li>1 种布尔型：<code>boolean</code>。</li></ul><table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th><th>取值范围</th></tr></thead><tbody><tr><td><code>byte</code></td><td>8</td><td>1</td><td>0</td><td>-128 ~ 127</td></tr><tr><td><code>short</code></td><td>16</td><td>2</td><td>0</td><td>-32768（-2^15） ~ 32767（2^15 - 1）</td></tr><tr><td><code>int</code></td><td>32</td><td>4</td><td>0</td><td>-2147483648 ~ 2147483647</td></tr><tr><td><code>long</code></td><td>64</td><td>8</td><td>0L</td><td>-9223372036854775808（-2^63） ~ 9223372036854775807（2^63 -1）</td></tr><tr><td><code>char</code></td><td>16</td><td>2</td><td>&#39;u0000&#39;</td><td>0 ~ 65535（2^16 - 1）</td></tr><tr><td><code>float</code></td><td>32</td><td>4</td><td>0f</td><td>1.4E-45 ~ 3.4028235E38</td></tr><tr><td><code>double</code></td><td>64</td><td>8</td><td>0d</td><td>4.9E-324 ~ 1.7976931348623157E308</td></tr><tr><td><code>boolean</code></td><td>1</td><td>-</td><td>false</td><td>true、false</td></tr></tbody></table><blockquote><p>对于 <code>boolean</code> 所占的字节数官方文档未明确定义，它依赖于 JVM 厂商的具体实现。</p><p>逻辑上理解是占用 1 位，但是实际中会考虑计算机高效存储因素。</p></blockquote><blockquote><p>拓展：这八种基本类型都有对应的包装类分别为：<code>Byte</code>、<code>Short</code>、<code>Integer</code>、<code>Long</code>、<code>Float</code>、<code>Double</code>、<code>Character</code>、<code>Boolean</code> 。</p></blockquote><h3 id="基本类型和包装类型的区别" tabindex="-1"><a class="header-anchor" href="#基本类型和包装类型的区别"><span><span style="color:#fb9b5f;">基本类型和包装类型的区别？</span></span></a></h3><p><img src="'+i+`" alt="primitive-type-vs-packaging-type" loading="lazy"></p><p><strong>用途</strong>：除了定义一些常量和局部变量之外，我们在其它地方比如方法参数、对象属性中很少会使用基本类型来定义变量。并且，包装类型可用于泛型，而基本类型不可以。</p><p><strong>存储方式</strong>：基本数据类型的局部变量存放在 Java 虚拟机栈中的局部变量表中，基本数据类型的成员变量（未被 <code>static</code> 修饰 ）存放在 Java 虚拟机的堆中。包装类型属于对象类型，我们知道几乎所有对象实例都存在于堆中。</p><p><strong>占用空间</strong>：相比于包装类型（对象类型）， 基本数据类型占用的空间往往非常小。</p><p><strong>默认值</strong>：成员变量包装类型不赋值就是 <code>null</code> ，而基本类型有默认值且不是 <code>null</code>。</p><p><strong>比较方式</strong>：对于基本数据类型来说，<code>==</code> 比较的是值。对于包装数据类型来说，<code>==</code> 比较的是对象的内存地址。所有整型包装类对象之间值的比较，全部使用 <code>equals()</code> 方法。</p><h3 id="为什么说是几乎所有对象实例都存在于堆中呢" tabindex="-1"><a class="header-anchor" href="#为什么说是几乎所有对象实例都存在于堆中呢"><span><span style="color:#fb9b5f;">为什么说是几乎所有对象实例都存在于堆中呢？</span></span></a></h3><p>这是因为 HotSpot 虚拟机引入了 JIT 优化之后，会对对象进行逃逸分析，如果发现某一个对象并没有逃逸到方法外部，那么就可能通过标量替换来实现栈上分配，而避免堆上分配内存。</p><blockquote><p><strong>注意</strong>：基本数据类型存放在栈中是一个常见的误区！！！</p><p>基本数据类型的存储位置取决于它们的作用域和声明方式。</p><p>如果它们是局部变量，那么它们会存放在栈中，如果它们是成员变量，那么它们会存放在堆中。</p></blockquote><h3 id="自动装箱与拆箱了解吗-原理是什么" tabindex="-1"><a class="header-anchor" href="#自动装箱与拆箱了解吗-原理是什么"><span><span style="color:#fb9b5f;">自动装箱与拆箱了解吗？原理是什么？</span></span></a></h3><p>什么是自动拆装箱？</p><ul><li>装箱：将基本类型用它们对应的引用类型包装起来。</li><li>拆箱：将包装类型转换为基本数据类型。</li></ul><blockquote><p><strong>注意</strong>：如果频繁拆装箱的话，也会严重影响系统的性能，我们应该尽量避免不必要的拆装箱操作。</p></blockquote><h3 id="为什么浮点数运算的时候会有精度丢失的风险" tabindex="-1"><a class="header-anchor" href="#为什么浮点数运算的时候会有精度丢失的风险"><span><span style="color:#fb9b5f;">为什么浮点数运算的时候会有精度丢失的风险？</span></span></a></h3><p>浮点数运算精度丢失代码演示：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">2.0f</span> <span class="token operator">-</span> <span class="token number">1.9f</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">1.8f</span> <span class="token operator">-</span> <span class="token number">1.7f</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.100000024</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.099999905</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre></div><p>为什么会出现这个问题呢？</p><p>这个和计算机保存浮点数的机制有很大关系，我们知道计算机是二进制的，而且计算机在表示一个数字时，宽度是有限的，无限循环的小数存储在计算机时，只能被截断，所以就会导致小数精度发生损失的情况，这也就是解释了为什么浮点数没有办法用二进制精确表示。</p><p>就比如说十进制下的 0.2 就没办法精确转换成二进制小数：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 0.2 转换为二进制数的过程为，不断乘以 2，直到不存在小数为止，</span>
<span class="token comment">// 在这个计算过程中，得到的整数部分从上到下排列就是二进制的结果。</span>
<span class="token number">0.2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">0.4</span> <span class="token operator">-&gt;</span> <span class="token number">0</span>
<span class="token number">0.4</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">0.8</span> <span class="token operator">-&gt;</span> <span class="token number">0</span>
<span class="token number">0.8</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">1.6</span> <span class="token operator">-&gt;</span> <span class="token number">1</span>
<span class="token number">0.6</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">1.2</span> <span class="token operator">-&gt;</span> <span class="token number">1</span>
<span class="token number">0.2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">0.4</span> <span class="token operator">-&gt;</span> <span class="token number">0</span>（发生循环）
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre></div>`,33),v={href:"http://kaito-kidd.com/2018/08/08/computer-system-float-point/",target:"_blank",rel:"noopener noreferrer"},g=s(`<h3 id="如何解决浮点数运算的精度丢失问题" tabindex="-1"><a class="header-anchor" href="#如何解决浮点数运算的精度丢失问题"><span><span style="color:#fb9b5f;">如何解决浮点数运算的精度丢失问题？</span></span></a></h3><p><code>BigDecimal</code> 可以实现对浮点数的运算，不会造成精度丢失。</p><p>通常情况下，大部分需要浮点数精确运算结果的业务场景（比如涉及到钱的场景）都是通过 <code>BigDecimal</code> 来做的。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">BigDecimal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;1.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;0.9&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;0.8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">BigDecimal</span> x <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> y <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 0.1 */</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 0.1 */</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* true */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h2><p>持续更新中...</p><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h2><p>持续更新中...</p>`,8);function f(y,_){const t=p("ExternalLinkIcon");return c(),l("div",null,[u,r(" more "),k,a("blockquote",null,[a("p",null,[n("官方文档："),a("a",h,[n("https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html"),e(t)])]),m]),b,a("p",null,[n("关于浮点数的更多内容，建议看一下"),a("a",v,[n("计算机系统基础（四）浮点数"),e(t)]),n("这篇文章。")]),g])}const q=o(d,[["render",f],["__file","index.html.vue"]]),J=JSON.parse('{"path":"/audition/java/core/","title":"基础","lang":"zh-CN","frontmatter":{"title":"基础","icon":"Code","category":"面试题","tag":"面试题","timeline":true,"star":true,"description":"此处是一些 Java 基础的高频面试题（持续更新中...）。 基础语法 Java 中的注释有哪几种形式？ 单行注释：通常用于解释方法内某单行代码的作用。 多行注释：通常用于解释一段代码的作用。 文档注释：通常用于生成 Java 开发文档。 标识符和关键字的区别是什么？ 在我们编写程序的时候，需要大量地为程序、类、变量、方法等取名字，于是就有了标识符。 ...","head":[["meta",{"property":"og:url","content":"https://SuperChenWenjing.github.io/audition/java/core/"}],["meta",{"property":"og:site_name","content":"陈文景"}],["meta",{"property":"og:title","content":"基础"}],["meta",{"property":"og:description","content":"此处是一些 Java 基础的高频面试题（持续更新中...）。 基础语法 Java 中的注释有哪几种形式？ 单行注释：通常用于解释方法内某单行代码的作用。 多行注释：通常用于解释一段代码的作用。 文档注释：通常用于生成 Java 开发文档。 标识符和关键字的区别是什么？ 在我们编写程序的时候，需要大量地为程序、类、变量、方法等取名字，于是就有了标识符。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-08T16:03:07.000Z"}],["meta",{"property":"article:author","content":"陈文景"}],["meta",{"property":"article:tag","content":"面试题"}],["meta",{"property":"article:modified_time","content":"2024-03-08T16:03:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-08T16:03:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"陈文景\\",\\"email\\":\\"2646530197@qq.com\\",\\"url\\":\\"https://superchenwenjing.github.io\\"}]}"]],"date":"2024-03-08T16:03:07.000Z"},"headers":[{"level":2,"title":"基础语法","slug":"基础语法","link":"#基础语法","children":[{"level":3,"title":"Java 中的注释有哪几种形式？","slug":"java-中的注释有哪几种形式","link":"#java-中的注释有哪几种形式","children":[]},{"level":3,"title":"标识符和关键字的区别是什么？","slug":"标识符和关键字的区别是什么","link":"#标识符和关键字的区别是什么","children":[]},{"level":3,"title":"Java 语言关键字有哪些？","slug":"java-语言关键字有哪些","link":"#java-语言关键字有哪些","children":[]},{"level":3,"title":"continue、break、return 的区别是什么？","slug":"continue、break、return-的区别是什么","link":"#continue、break、return-的区别是什么","children":[]}]},{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[{"level":3,"title":"Java 中的几种基本数据类型了解么？","slug":"java-中的几种基本数据类型了解么","link":"#java-中的几种基本数据类型了解么","children":[]},{"level":3,"title":"基本类型和包装类型的区别？","slug":"基本类型和包装类型的区别","link":"#基本类型和包装类型的区别","children":[]},{"level":3,"title":"为什么说是几乎所有对象实例都存在于堆中呢？","slug":"为什么说是几乎所有对象实例都存在于堆中呢","link":"#为什么说是几乎所有对象实例都存在于堆中呢","children":[]},{"level":3,"title":"自动装箱与拆箱了解吗？原理是什么？","slug":"自动装箱与拆箱了解吗-原理是什么","link":"#自动装箱与拆箱了解吗-原理是什么","children":[]},{"level":3,"title":"为什么浮点数运算的时候会有精度丢失的风险？","slug":"为什么浮点数运算的时候会有精度丢失的风险","link":"#为什么浮点数运算的时候会有精度丢失的风险","children":[]},{"level":3,"title":"如何解决浮点数运算的精度丢失问题？","slug":"如何解决浮点数运算的精度丢失问题","link":"#如何解决浮点数运算的精度丢失问题","children":[]}]},{"level":2,"title":"变量","slug":"变量","link":"#变量","children":[]},{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[]}],"git":{"createdTime":1709913787000,"updatedTime":1709913787000,"contributors":[{"name":"陈文景","email":"2646530197@qq.com","commits":1}]},"readingTime":{"minutes":6.28,"words":1883},"filePathRelative":"audition/java/core/README.md","localizedDate":"2024年3月8日","excerpt":"<p>此处是一些 Java 基础的高频面试题（持续更新中...）。</p>\\n","autoDesc":true}');export{q as comp,J as data};
