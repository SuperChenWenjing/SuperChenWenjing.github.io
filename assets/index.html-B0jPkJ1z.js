import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o,c as i,b as c,d as a,e,a as p,f as n}from"./app-BuY6eprl.js";const l={},d=a("p",null,"此处介绍 Docker 如何搭建自有仓库。",-1),m=n(`<h2 id="搭建自有仓库" tabindex="-1"><a class="header-anchor" href="#搭建自有仓库"><span>搭建自有仓库</span></a></h2><h3 id="简易版" tabindex="-1"><a class="header-anchor" href="#简易版"><span>简易版</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Docker 官方的 Docker Registry 是一个基础版本的 Docker 镜像仓库，具备仓库管理的完整功能，但是没有图形化界面。</p></div><p>搭建方式的命令如下：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\\</span>
    <span class="token parameter variable">--name</span> registry <span class="token punctuation">\\</span>
    <span class="token parameter variable">-p</span> <span class="token number">5000</span>:5000 <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> registry-data:/var/lib/registry <span class="token punctuation">\\</span>
    registry
</code></pre></div><p>命令中挂载了一个数据卷 <code>registry-data</code> 到容器内的 <code>/var/lib/registry</code> 目录，这是私有镜像库存放数据的目录。</p>`,6),u={href:"http://YourIp:5000/v2/_catalog",target:"_blank",rel:"noopener noreferrer"},v=n(`<h3 id="图形界面版" tabindex="-1"><a class="header-anchor" href="#图形界面版"><span>图形界面版</span></a></h3><p>使用 <strong>DockerCompose</strong> 部署带有图象界面的 DockerRegistry 的命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>version: <span class="token string">&#39;3.0&#39;</span>
services:
  registry:
    image: registry
    volumes:
      - ./registry-data:/var/lib/registry
  ui:
    image: joxit/docker-registry-ui:static
    ports:
      - <span class="token number">8080</span>:80
    environment:
      - <span class="token assign-left variable">REGISTRY_TITLE</span><span class="token operator">=</span>私有仓库的名称
      - <span class="token assign-left variable">REGISTRY_URL</span><span class="token operator">=</span>http://registry:5000
    depends_on:
      - registry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">注意！</p><p>我们的私服采用的是 <code>http</code> 协议，默认是不被 Docker 信任，所以需要做一个配置。</p></div><p>配置 Docker 的信任地址：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 打开要修改的文件</span>
<span class="token function">vi</span> /etc/docker/daemon.json
<span class="token comment"># 添加内容：</span>
<span class="token string">&quot;insecure-registries&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;http://YourIp:8080&quot;</span><span class="token punctuation">]</span>
<span class="token comment"># 重加载</span>
systemctl daemon-reload
<span class="token comment"># 重启docker</span>
systemctl restart <span class="token function">docker</span>
</code></pre></div>`,6);function g(h,k){const t=r("ExternalLinkIcon");return o(),i("div",null,[d,c(" more "),m,a("p",null,[e("访问 "),a("a",u,[e("http://YourIp:5000/v2/_catalog"),p(t)]),e(" 可以查看当前私有镜像服务中包含的镜像（'YourIp' 表示的是你自己的 IP 地址）。")]),v])}const _=s(l,[["render",g],["__file","index.html.vue"]]),f=JSON.parse('{"path":"/notes/docker/repository/","title":"搭建自有仓库","lang":"zh-CN","frontmatter":{"title":"搭建自有仓库","icon":"install","category":"容器技术","tag":["Docker"],"timeline":true,"star":true,"description":"此处介绍 Docker 如何搭建自有仓库。 搭建自有仓库 简易版 提示 Docker 官方的 Docker Registry 是一个基础版本的 Docker 镜像仓库，具备仓库管理的完整功能，但是没有图形化界面。 搭建方式的命令如下： 命令中挂载了一个数据卷 registry-data 到容器内的 /var/lib/registry 目录，这是私有镜像...","head":[["meta",{"property":"og:url","content":"https://SuperChenWenjing.github.io/notes/docker/repository/"}],["meta",{"property":"og:site_name","content":"陈文景"}],["meta",{"property":"og:title","content":"搭建自有仓库"}],["meta",{"property":"og:description","content":"此处介绍 Docker 如何搭建自有仓库。 搭建自有仓库 简易版 提示 Docker 官方的 Docker Registry 是一个基础版本的 Docker 镜像仓库，具备仓库管理的完整功能，但是没有图形化界面。 搭建方式的命令如下： 命令中挂载了一个数据卷 registry-data 到容器内的 /var/lib/registry 目录，这是私有镜像..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-08T16:03:07.000Z"}],["meta",{"property":"article:author","content":"陈文景"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:modified_time","content":"2024-03-08T16:03:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"搭建自有仓库\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-08T16:03:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"陈文景\\",\\"email\\":\\"2646530197@qq.com\\",\\"url\\":\\"https://superchenwenjing.github.io\\"}]}"]],"date":"2024-03-08T16:03:07.000Z"},"headers":[{"level":2,"title":"搭建自有仓库","slug":"搭建自有仓库","link":"#搭建自有仓库","children":[{"level":3,"title":"简易版","slug":"简易版","link":"#简易版","children":[]},{"level":3,"title":"图形界面版","slug":"图形界面版","link":"#图形界面版","children":[]}]}],"git":{"createdTime":1709913787000,"updatedTime":1709913787000,"contributors":[{"name":"陈文景","email":"2646530197@qq.com","commits":1}]},"readingTime":{"minutes":1.05,"words":315},"filePathRelative":"notes/docker/repository/README.md","localizedDate":"2024年3月8日","excerpt":"<p>此处介绍 Docker 如何搭建自有仓库。</p>\\n","autoDesc":true}');export{_ as comp,f as data};
