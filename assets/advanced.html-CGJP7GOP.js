import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as o,f as l}from"./app-BSnGQVIZ.js";const i={},a=l('<h2 id="多态" tabindex="-1"><a class="header-anchor" href="#多态"><span>多态</span></a></h2><div class="hint-container tip"><p class="hint-container-title">什么是多态？</p><p>父类的引用指向子类的对象。</p><p>多态的前提条件：</p><ul><li>有<strong style="color:#fb9b5f;">继承</strong>/<strong style="color:#fb9b5f;">实现</strong>关系。</li><li>有<strong style="color:#fb9b5f;">父类引用指向子类对象</strong>。</li><li><strong style="color:#fb9b5f;">有方法重写（多态侧重行为多态）</strong>。</li></ul><p>多态格式：<code>父类类型 变量名 = new 子类类型()</code>。</p><p>多态下会产生的一个问题：</p><ul><li><strong style="color:#fb9b5f;">多态下不能使用子类的独有功能</strong>。</li><li>需要强制类型转换（从父到子）。</li><li>建议在类型转换前先通过 <code>instanceof</code> 关键字校验需要转换的类是否是由该父类产生的。</li><li>否则会出现 ClassCastException 类型转换异常的错误。</li></ul></div><p>多态中成员的访问特点？</p><ul><li>方法调用：编译看左边，运行看右边。</li><li>变量调用：编译看左边，运行也看左边。</li></ul><p>多态的前提？</p><ul><li>有继承/实现的关系。</li><li>有父类的引用指向子类对象。</li><li>有方法重写（多态注重行为多态）。</li></ul><p>多态的优点和缺点？</p><ul><li>优点：实现接触耦合，便于扩展。</li><li>缺点：多态下不能使用子类独有的功能（如果要使用子类的独有功能则需要强制类型转换）。</li></ul><h2 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题"><span>面试题</span></a></h2><p><strong>请问 <code>==</code> 和 <code>equals</code> 方法有什么区别？</strong></p><ul><li><code>==</code> 既可以比较基本数据类型也可以比较引用数据类型。 <ul><li>对于基本数据类型比较的是值。</li><li>对于引用数据类型比较的是内存地址。</li></ul></li><li><code>equals</code> 是属于 <code>java.lang.Object</code> 类中的方法。 <ul><li>如果该方法没有被重写过：则默认与 <code>==</code> 的比较逻辑一致。</li><li>如果该方法有被重写过：通常情况下，我们重写 <code>equals</code> 方法会用于比较类中相应的属性是否相等。</li></ul></li></ul>',11),n=[a];function c(r,s){return t(),o("div",null,n)}const m=e(i,[["render",c],["__file","advanced.html.vue"]]),u=JSON.parse('{"path":"/notes/java/oop/advanced.html","title":"进阶","lang":"zh-CN","frontmatter":{"title":"进阶","icon":"Code","category":"Java","timeline":true,"star":true,"description":"多态 什么是多态？ 父类的引用指向子类的对象。 多态的前提条件： 有继承/实现关系。 有父类引用指向子类对象。 有方法重写（多态侧重行为多态）。 多态格式：父类类型 变量名 = new 子类类型()。 多态下会产生的一个问题： 多态下不能使用子类的独有功能。 需要强制类型转换（从父到子）。 建议在类型转换前先通过 instanceof 关键字校验需要转...","head":[["meta",{"property":"og:url","content":"https://SuperChenWenjing.github.io/notes/java/oop/advanced.html"}],["meta",{"property":"og:site_name","content":"陈文景"}],["meta",{"property":"og:title","content":"进阶"}],["meta",{"property":"og:description","content":"多态 什么是多态？ 父类的引用指向子类的对象。 多态的前提条件： 有继承/实现关系。 有父类引用指向子类对象。 有方法重写（多态侧重行为多态）。 多态格式：父类类型 变量名 = new 子类类型()。 多态下会产生的一个问题： 多态下不能使用子类的独有功能。 需要强制类型转换（从父到子）。 建议在类型转换前先通过 instanceof 关键字校验需要转..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-07T03:37:40.000Z"}],["meta",{"property":"article:author","content":"陈文景"}],["meta",{"property":"article:modified_time","content":"2024-04-07T03:37:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"进阶\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-07T03:37:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"陈文景\\",\\"email\\":\\"2646530197@qq.com\\",\\"url\\":\\"https://superchenwenjing.github.io\\"}]}"]],"date":"2024-04-06T07:26:51.000Z"},"headers":[{"level":2,"title":"多态","slug":"多态","link":"#多态","children":[]},{"level":2,"title":"面试题","slug":"面试题","link":"#面试题","children":[]}],"git":{"createdTime":1712388411000,"updatedTime":1712461060000,"contributors":[{"name":"陈文景","email":"2646530197@qq.com","commits":2}]},"readingTime":{"minutes":1.57,"words":470},"filePathRelative":"notes/java/oop/advanced.md","localizedDate":"2024年4月6日","excerpt":"","autoDesc":true}');export{m as comp,u as data};
