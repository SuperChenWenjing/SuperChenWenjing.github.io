import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as c,c as r,b as i,d as n,e,a as t,f as a}from"./app-CEgLB3KH.js";const p="/assets/Docker网络-DM2zornc.png",d={},m=n("p",null,"此处是 Docker 中网络的配置方式。",-1),k=a('<h2 id="网络配置" tabindex="-1"><a class="header-anchor" href="#网络配置"><span>网络配置</span></a></h2><div class="hint-container tip"><p class="hint-container-title">为什么需要在 Docker 中配置网络？</p><p>由于 Java 项目往往需要访问其它各种中间件（例如：MySQL、Redis）。</p><p>容器的网络 IP 其实是一个虚拟的 IP，其值并不固定与某一个容器绑定，如果我们在开发时写死某个 IP，而在部署时很可能容器的 IP 会发生变化，连接会失败。</p><p>所以，我们必须借助于 Docker 的网络功能来解决这个问题。</p><p><img src="'+p+'" alt="Docker网络" loading="lazy"></p></div>',2),u=n("p",null,[e("查看帮助文档："),n("code",null,"docker network --help"),e("。")],-1),b={href:"https://docs.docker.com/engine/reference/commandline/network",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"常用命令如下：",-1),_=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"命令"),n("th",{style:{"text-align":"left"}},"说明"),n("th",{style:{"text-align":"left"}},"文档地址")])],-1),h=n("td",{style:{"text-align":"left"}},"docker network create",-1),f=n("td",{style:{"text-align":"left"}},"创建一个网络",-1),g={style:{"text-align":"left"}},y={href:"https://docs.docker.com/engine/reference/commandline/network_create/",target:"_blank",rel:"noopener noreferrer"},x=n("td",{style:{"text-align":"left"}},"docker network ls",-1),w=n("td",{style:{"text-align":"left"}},"查看所有网络",-1),q={style:{"text-align":"left"}},I={href:"https://docs.docker.com/engine/reference/commandline/network_ls/",target:"_blank",rel:"noopener noreferrer"},D=n("td",{style:{"text-align":"left"}},"docker network rm",-1),P=n("td",{style:{"text-align":"left"}},"删除指定网络",-1),N={style:{"text-align":"left"}},E={href:"https://docs.docker.com/engine/reference/commandline/network_rm/",target:"_blank",rel:"noopener noreferrer"},T=n("td",{style:{"text-align":"left"}},"docker network prune",-1),R=n("td",{style:{"text-align":"left"}},"清除未使用的网络",-1),M={style:{"text-align":"left"}},S={href:"https://docs.docker.com/engine/reference/commandline/network_prune/",target:"_blank",rel:"noopener noreferrer"},C=n("td",{style:{"text-align":"left"}},"docker network connect",-1),L=n("td",{style:{"text-align":"left"}},"使指定容器连接加入某网络",-1),V={style:{"text-align":"left"}},z={href:"https://docs.docker.com/engine/reference/commandline/network_connect/",target:"_blank",rel:"noopener noreferrer"},j=n("td",{style:{"text-align":"left"}},"docker network disconnect",-1),J=n("td",{style:{"text-align":"left"}},"使指定容器连接离开某网络",-1),Z={style:{"text-align":"left"}},A={href:"https://docs.docker.com/engine/reference/commandline/network_disconnect/",target:"_blank",rel:"noopener noreferrer"},B=n("td",{style:{"text-align":"left"}},"docker network inspect",-1),O=n("td",{style:{"text-align":"left"}},"查看网络详细信息",-1),Q={style:{"text-align":"left"}},G={href:"https://docs.docker.com/engine/reference/commandline/network_inspect/",target:"_blank",rel:"noopener noreferrer"},W=a(`<p>可以通过 <code>docker inspect 容器名称</code> 命令查看某个容器的详细信息（<code>Networks</code> 字段则为容器网络信息）。</p><h3 id="自定义网络" tabindex="-1"><a class="header-anchor" href="#自定义网络"><span>自定义网络</span></a></h3><div class="hint-container warning"><p class="hint-container-title">注意！</p><p>加入自定义网络的容器可以直接通过容器名互相访问（默认网络则不支持通过容器名互相访问）。</p></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 1.首先通过命令创建一个网络</span>
<span class="token function">docker</span> network create net-demo

<span class="token comment"># 2.然后查看网络</span>
<span class="token function">docker</span> network <span class="token function">ls</span>
<span class="token comment"># 可以通过 ip addr 查看 Linux 系统多了一个网卡</span>
<span class="token comment"># 结果：</span>
NETWORK ID     NAME      DRIVER    SCOPE
639bc44d0a87   bridge    bridge    <span class="token builtin class-name">local</span>
403f16ec62a2   net-demo     bridge    <span class="token builtin class-name">local</span>
0dc0f72a0fbb   <span class="token function">host</span>      <span class="token function">host</span>      <span class="token builtin class-name">local</span>
cd8d3e8df47b   none      null      <span class="token builtin class-name">local</span>
<span class="token comment"># 其中除了 net-demo 以外其它的都是默认的网络</span>

<span class="token comment"># 3.让 docker-demo 和 mysql 都加入该网络（注意：在加入网络时可以通过 --alias 给容器起别名）</span>
<span class="token comment"># 这样该网络内的其它容器就可以用别名来互相访问了！</span>
<span class="token comment"># 其实每一个容器都有一个默认的别名就是其容器的名称！</span>
<span class="token comment"># 3.1.把 mysql 容器加入到 net-demo 网络中并指定别名为 db</span>
<span class="token function">docker</span> network connect net-demo mysql <span class="token parameter variable">--alias</span> db
<span class="token comment"># 3.2.把我们的 java 项目加入到 net-demo 网络中</span>
<span class="token function">docker</span> network connect net-demo docker-demo
<span class="token comment"># 3.3.查看是否加入网络成功</span>
<span class="token function">docker</span> inspect mysql
<span class="token function">docker</span> inspect docker-demo

<span class="token comment"># 4.进入 docker-demo 容器</span>
<span class="token comment"># 尝试利用别名访问 db</span>
<span class="token comment"># 4.1.进入容器</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> docker-demo <span class="token function">bash</span>
<span class="token comment"># 4.2.用 db 别名访问</span>
<span class="token function">ping</span> db
<span class="token comment"># 结果</span>
PING db <span class="token punctuation">(</span><span class="token number">172.18</span>.0.2<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.
<span class="token number">64</span> bytes from mysql.net-demo <span class="token punctuation">(</span><span class="token number">172.18</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.070</span> ms
<span class="token number">64</span> bytes from mysql.net-demo <span class="token punctuation">(</span><span class="token number">172.18</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.056</span> ms
<span class="token comment"># 4.3.用容器名访问</span>
<span class="token function">ping</span> mysql
<span class="token comment"># 结果：</span>
PING mysql <span class="token punctuation">(</span><span class="token number">172.18</span>.0.2<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.
<span class="token number">64</span> bytes from mysql.net-demo <span class="token punctuation">(</span><span class="token number">172.18</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.044</span> ms
<span class="token number">64</span> bytes from mysql.net-demo <span class="token punctuation">(</span><span class="token number">172.18</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.054</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在则无需记住 IP 地址也可以实现容器之间互联了！！！</p><p>补充说明：也可以在创建容器的时候通过 <code>--newwork</code> 指令指定需要加入的网络（此时就不会加入默认网络了）。</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 注意：创建容器时指定了网络，则不会再加入默认的网络了</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> docker-demo <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token parameter variable">--newwork</span> net-demo docker-demo:1.0
</code></pre></div><p><strong>总结：</strong></p><ul><li>在自定义网络中，可以给容器起多个别名，默认的别名是容器名的本身。</li><li>在同一个自定义网络中的容器，可以通过别名来互相访问。</li></ul>`,9);function K(F,H){const s=l("ExternalLinkIcon");return c(),r("div",null,[m,i(" more "),k,n("blockquote",null,[u,n("p",null,[e("更多命令查看官方文档："),n("a",b,[e("https://docs.docker.com/engine/reference/commandline/network"),t(s)])])]),v,n("table",null,[_,n("tbody",null,[n("tr",null,[h,f,n("td",g,[n("a",y,[e("docker network create"),t(s)])])]),n("tr",null,[x,w,n("td",q,[n("a",I,[e("docs.docker.com"),t(s)])])]),n("tr",null,[D,P,n("td",N,[n("a",E,[e("docs.docker.com"),t(s)])])]),n("tr",null,[T,R,n("td",M,[n("a",S,[e("docs.docker.com"),t(s)])])]),n("tr",null,[C,L,n("td",V,[n("a",z,[e("docs.docker.com"),t(s)])])]),n("tr",null,[j,J,n("td",Z,[n("a",A,[e("docker network disconnect"),t(s)])])]),n("tr",null,[B,O,n("td",Q,[n("a",G,[e("docker network inspect"),t(s)])])])])]),W])}const Y=o(d,[["render",K],["__file","index.html.vue"]]),$=JSON.parse('{"path":"/notes/docker/network/","title":"网络配置","lang":"zh-CN","frontmatter":{"title":"网络配置","icon":"install","category":"容器技术","tag":["Docker"],"timeline":true,"star":true,"description":"此处是 Docker 中网络的配置方式。 网络配置 为什么需要在 Docker 中配置网络？ 由于 Java 项目往往需要访问其它各种中间件（例如：MySQL、Redis）。 容器的网络 IP 其实是一个虚拟的 IP，其值并不固定与某一个容器绑定，如果我们在开发时写死某个 IP，而在部署时很可能容器的 IP 会发生变化，连接会失败。 所以，我们必须借助...","head":[["meta",{"property":"og:url","content":"https://SuperChenWenjing.github.io/notes/docker/network/"}],["meta",{"property":"og:site_name","content":"陈文景"}],["meta",{"property":"og:title","content":"网络配置"}],["meta",{"property":"og:description","content":"此处是 Docker 中网络的配置方式。 网络配置 为什么需要在 Docker 中配置网络？ 由于 Java 项目往往需要访问其它各种中间件（例如：MySQL、Redis）。 容器的网络 IP 其实是一个虚拟的 IP，其值并不固定与某一个容器绑定，如果我们在开发时写死某个 IP，而在部署时很可能容器的 IP 会发生变化，连接会失败。 所以，我们必须借助..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-08T16:03:07.000Z"}],["meta",{"property":"article:author","content":"陈文景"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:modified_time","content":"2024-03-08T16:03:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"网络配置\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-08T16:03:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"陈文景\\",\\"email\\":\\"2646530197@qq.com\\",\\"url\\":\\"https://superchenwenjing.github.io\\"}]}"]],"date":"2024-03-08T16:03:07.000Z"},"headers":[{"level":2,"title":"网络配置","slug":"网络配置","link":"#网络配置","children":[{"level":3,"title":"自定义网络","slug":"自定义网络","link":"#自定义网络","children":[]}]}],"git":{"createdTime":1709913787000,"updatedTime":1709913787000,"contributors":[{"name":"陈文景","email":"2646530197@qq.com","commits":1}]},"readingTime":{"minutes":3.01,"words":902},"filePathRelative":"notes/docker/network/README.md","localizedDate":"2024年3月8日","excerpt":"<p>此处是 Docker 中网络的配置方式。</p>\\n","autoDesc":true}');export{Y as comp,$ as data};
