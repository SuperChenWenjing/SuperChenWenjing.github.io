import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as a,f as s}from"./app-BUFo3Ghc.js";const e="/assets/集合类体系结构-DEbNK-xI.png",o="/assets/Collection集合体系-CzZNIe3u.png",p="/assets/Collection集合常用API-DiOkJknO.png",l={},c=s('<h2 id="集合" tabindex="-1"><a class="header-anchor" href="#集合"><span>集合</span></a></h2><p><strong>集合的特点：</strong></p><ul><li>集合中存储的是元素对象的地址。</li><li>集合的大小不固定，启动后可以动态变化，类型也可以选择不固定。</li><li>集合非常适合元素个数不能确定，且需要做元素的增删操作的场景。</li><li>同时，集合提供的种类特别的丰富，功能也是非常强大的，开发中集合用的更多。</li></ul><p><strong>注意事项：</strong></p><ul><li>集合的泛型只支持引用数据类型，不支持基本数据类型。</li><li>可以在编译阶段约束集合只能操作某种数据类型。</li><li>所以集合中存储的元素都认为是对象。</li></ul><p><strong>集合类体系结构：</strong></p><ul><li>Collection 代表单列集合，每个元素（数据）只包含一个值。</li><li>Map 代表双列集合，每个元素（数据）包含两个值（健值对）。</li></ul><p><img src="'+e+'" alt="集合类体系结构" loading="lazy"></p><h2 id="collection" tabindex="-1"><a class="header-anchor" href="#collection"><span>Collection</span></a></h2><blockquote><p>Collection 代表单列集合，每个元素（数据）只包含一个值。</p><p><img src="'+o+'" alt="Collection集合体系" loading="lazy"></p></blockquote><p><strong>Collection 集合的特点：</strong></p><ul><li><strong style="color:#fb9b5f;">List 系列集合</strong>：添加的元素是有序、可重复、有索引。 <ul><li><code>ArrayList</code>、<code>LinekdList</code>：有序、可重复、有索引。</li></ul></li><li><strong style="color:#fb9b5f;">Set 系列集合</strong>：添加的元素是无序、不重复、无索引。 <ul><li><code>HashSet</code>：无序、不重复、无索引。</li><li><code>LinkedHashSet</code>：有序、不重复、无索引。</li><li><code>TreeSet</code>：按照大小默认升序排序、不重复、无索引。</li></ul></li></ul><h3 id="collection集合常用api" tabindex="-1"><a class="header-anchor" href="#collection集合常用api"><span>Collection集合常用API</span></a></h3><blockquote><p>Collection 是单列集合的祖宗接口，它的功能是全部单列集合都可以继承使用的。</p></blockquote><p><img src="'+p+`" alt="Collection集合常用API" loading="lazy"></p><h3 id="collection集合的遍历方式" tabindex="-1"><a class="header-anchor" href="#collection集合的遍历方式"><span>Collection集合的遍历方式</span></a></h3><h4 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器"><span>迭代器</span></a></h4><blockquote><p>遍历就是一个一个的把容器中的元素访问一遍。</p><p>迭代器在 Java 中的代表是 <code>Iterator</code> 迭代器是集合的专用的遍历方式。</p></blockquote><p>Collection 集合获取迭代器：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td><code>Iterator&lt;E&gt; iterator()</code></td><td>返回集合中的迭代器对象，该迭代器对象默认指向当前集合的 0 索引。</td></tr></tbody></table><p>Iterator 中的常用方法：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>boolean hasNext()</td><td>询问当前位置是否有元素存在，存在返回 true，不存在返回 false。</td></tr><tr><td>E next()</td><td>获取当前位置的元素，并同时将迭代器对象移向下一个位置，注意防止取出越界。</td></tr></tbody></table><p>示例代码：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> lists<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token class-name">String</span> ele <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>注意事项：迭代器如果取元素越界会出现 <code>NoSuchElementException</code> 异常。</p><h4 id="foreach或增强for" tabindex="-1"><a class="header-anchor" href="#foreach或增强for"><span>forEach或增强for</span></a></h4><p><code>forEach</code>：见以下 lambda 表达式。</p><p>增强 <code>for</code> 循环：既可以遍历集合也可以遍历数组。</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">for</span><span class="token punctuation">(</span>元素数据类型 变量名 <span class="token operator">:</span> 数组或者<span class="token class-name">Collection</span>集合<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// 在此处使用变量即可 该变量就是元素</span>
<span class="token punctuation">}</span>

<span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> ele <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="lambda表达式" tabindex="-1"><a class="header-anchor" href="#lambda表达式"><span>lambda表达式</span></a></h4><blockquote><p>得益于 JDK8 开始的新技术 Lambda 表达式，提供了一种更简单、更直接的遍历集合的方式。</p></blockquote><p>Collection 结合 Lambda 遍历的 API：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>default void forEach(Consumer&lt;? super T&gt; action);</td><td>结合 lambda 遍历集合</td></tr></tbody></table><p>示例代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 原来的代码</span>
<span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> lists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
lists<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 简化后的代码</span>
lists<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 或者</span>
lists<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="list系列集合" tabindex="-1"><a class="header-anchor" href="#list系列集合"><span>List系列集合</span></a></h3><p><code>List</code> 系列集合系列的特点：</p><ul><li><code>ArrayList</code>、<code>LinekdList</code>：有序、可重复、有索引。</li><li>有序：指存储和取出的元素顺序一致。</li><li>有索引：可以通过索引操作元素。</li><li>可重复：存储的元素可以重复。</li></ul><p><code>List</code> 系列集合的特有方法：</p><ul><li><p><code>List</code> 集合因为支持索引，所以多了很多索引操作的独特 API，其他 <code>Collection</code> 的功能 <code>List</code> 也都继承了。</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>void add(int index,E element)</td><td>在此集合中的指定位置插入指定的元素。</td></tr><tr><td>E remove(int index)</td><td>删除指定索引处的元素，返回被删除的元素。</td></tr><tr><td>E set(int index,E element)</td><td>修改指定索引处的元素，返回被修改的元素。</td></tr><tr><td>E get(int index)</td><td>返回指定索引处的元素。</td></tr></tbody></table></li></ul><p><code>List</code> 集合的遍历方式：</p><ul><li>迭代器。</li><li>增强 <code>for</code> 循环。</li><li>Lambda 表达式。</li><li><code>for</code> 循环（因为 <code>List</code> 集合存在索引）。</li></ul><p><code>List</code> 实现类的底层原理：</p><ul><li><p><code>ArrayList</code> 的底层原理：</p><ul><li><p><code>ArrayList</code> 底层是基于数组实现的：根据索引定位元素快，增删需要做元素的移位操作。</p></li><li><p>第一次创建集合并添加第一个元素的时候，在底层创建一个默认长度为 10 的数组。</p></li></ul></li><li><p><code>LinkedList</code> 的底层原理：</p><ul><li>底层数据结构是双链表，查询慢，首尾操作的速度是极快的，所以多了很多首尾操作的特有API。</li></ul></li></ul><p><code>LinkedList</code> 集合的特有功能：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public void addFirst(E e)</td><td>在该列表开头插入指定的元素。</td></tr><tr><td>public void addLast(E e)</td><td>将指定的元素追加到此列表的末尾。</td></tr><tr><td>public E getFirst()</td><td>返回此列表中的第一个元素。</td></tr><tr><td>public E getLast()</td><td>返回此列表中的最后一个元素。</td></tr><tr><td>public E removeFirst()</td><td>从此列表中删除并返回第一个元素。</td></tr><tr><td>public E removeLast()</td><td>从此列表中删除并返回最后一个元素。</td></tr></tbody></table><h4 id="arraylist" tabindex="-1"><a class="header-anchor" href="#arraylist"><span>ArrayList</span></a></h4><p>ArrayList 代表的是集合类（集合是一种容器，与数组类似，不同的是<strong style="color:#fb9b5f;">集合的大小是不固定的</strong>）。</p><p>通过创建 ArrayList 的对象表示得到一个集合容器，同时 ArrayList 提供了比数组更好用，更丰富的 API（功能）给程序员使用。</p><p><strong>ArrayList 集合的对象创建方式：</strong></p><table><thead><tr><th>构造器</th><th>说明</th></tr></thead><tbody><tr><td>public ArrayList()</td><td>创建一个空的集合对象。</td></tr></tbody></table><p><strong>ArrayList 集合添加元素的方法：</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean add(E e)</td><td>将指定的元素追加到此集合的末尾。</td></tr><tr><td>public void add(int index,E element)</td><td>在此集合中的指定位置插入指定的元素。</td></tr></tbody></table><p><strong>ArrayList 对泛型的支持：</strong></p><p><code>ArrayList&lt;E&gt;</code>：其实就是一个泛型类，可以在编译阶段约束集合对象只能操作某种数据类型。</p><p>举例说明：</p><ul><li><code>ArrayList&lt;String&gt;</code>：此集合只能操作字符串类型的元素。</li><li><code>ArrayList&lt;Integer&gt;</code>：此集合只能操作整数类型的元素。</li></ul><p><strong>ArrayList 常用方法、遍历：</strong></p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public E get(int index)</td><td>返回指定索引处的元素。</td></tr><tr><td>public int size()</td><td>返回集合中的元素的个数。</td></tr><tr><td>public E remove(int index)</td><td>删除指定索引处的元素，返回被删除的元素。</td></tr><tr><td>public boolean remove(Object o)</td><td>删除指定的元素，返回删除是否成功。</td></tr><tr><td>public E set(int index,E element)</td><td>修改指定索引处的元素，返回被修改的元素。</td></tr></tbody></table><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span>Map</span></a></h2><blockquote><p>Map 代表双列集合，每个元素（数据）包含两个值（健值对）。</p></blockquote>`,61),i=[c];function d(r,u){return t(),a("div",null,i)}const m=n(l,[["render",d],["__file","index.html.vue"]]),b=JSON.parse('{"path":"/notes/java/collection/","title":"集合相关","lang":"zh-CN","frontmatter":{"title":"集合相关","icon":"Code","category":"Java","timeline":true,"star":true,"description":"集合 集合的特点： 集合中存储的是元素对象的地址。 集合的大小不固定，启动后可以动态变化，类型也可以选择不固定。 集合非常适合元素个数不能确定，且需要做元素的增删操作的场景。 同时，集合提供的种类特别的丰富，功能也是非常强大的，开发中集合用的更多。 注意事项： 集合的泛型只支持引用数据类型，不支持基本数据类型。 可以在编译阶段约束集合只能操作某种数据类...","head":[["meta",{"property":"og:url","content":"https://SuperChenWenjing.github.io/notes/java/collection/"}],["meta",{"property":"og:site_name","content":"陈文景"}],["meta",{"property":"og:title","content":"集合相关"}],["meta",{"property":"og:description","content":"集合 集合的特点： 集合中存储的是元素对象的地址。 集合的大小不固定，启动后可以动态变化，类型也可以选择不固定。 集合非常适合元素个数不能确定，且需要做元素的增删操作的场景。 同时，集合提供的种类特别的丰富，功能也是非常强大的，开发中集合用的更多。 注意事项： 集合的泛型只支持引用数据类型，不支持基本数据类型。 可以在编译阶段约束集合只能操作某种数据类..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-18T02:39:06.000Z"}],["meta",{"property":"article:author","content":"陈文景"}],["meta",{"property":"article:modified_time","content":"2024-04-18T02:39:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"集合相关\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-18T02:39:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"陈文景\\",\\"email\\":\\"2646530197@qq.com\\",\\"url\\":\\"https://superchenwenjing.github.io\\"}]}"]],"date":"2024-04-13T15:54:50.000Z"},"headers":[{"level":2,"title":"集合","slug":"集合","link":"#集合","children":[]},{"level":2,"title":"Collection","slug":"collection","link":"#collection","children":[{"level":3,"title":"Collection集合常用API","slug":"collection集合常用api","link":"#collection集合常用api","children":[]},{"level":3,"title":"Collection集合的遍历方式","slug":"collection集合的遍历方式","link":"#collection集合的遍历方式","children":[]},{"level":3,"title":"List系列集合","slug":"list系列集合","link":"#list系列集合","children":[]}]},{"level":2,"title":"Map","slug":"map","link":"#map","children":[]}],"git":{"createdTime":1713023690000,"updatedTime":1713407946000,"contributors":[{"name":"陈文景","email":"2646530197@qq.com","commits":3}]},"readingTime":{"minutes":5.63,"words":1688},"filePathRelative":"notes/java/collection/README.md","localizedDate":"2024年4月13日","excerpt":"","autoDesc":true}');export{m as comp,b as data};
