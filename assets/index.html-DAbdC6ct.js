import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as t,b as n,d as p,f as a}from"./app-B_EF5zKA.js";const i={},o=p("p",null,"此处是一些 Redis 的高频面试题（持续更新中...）。",-1),r=a(`<h2 id="基础篇" tabindex="-1"><a class="header-anchor" href="#基础篇"><span>基础篇</span></a></h2><h3 id="redis-中的数据结构有哪些" tabindex="-1"><a class="header-anchor" href="#redis-中的数据结构有哪些"><span><span style="color:#fb9b5f;">Redis 中的数据结构有哪些？</span></span></a></h3><p>Redis 是一种基于内存的数据存储系统，支持多种灵活的数据结构。</p><p>以下是 Redis 中主要的数据结构：</p><ol><li><p>String（字符串）：</p><p>存储字符串值，可包含任意数据，例如文本、二进制数据。</p><p>常用命令：SET、GET、INCR、APPEND 等。</p></li><li><p>Hash（哈希表）：</p><p>存储字段和与字段相关联的值，类似于关联数组或对象。</p><p>常用命令：HSET、HGET、HDEL、HGETALL 等。</p></li><li><p>List（列表）：</p><p>存储有序的元素列表。</p><p>可在列表的两端进行插入和删除操作。</p><p>常用命令：LPUSH、RPUSH、LPOP、LRANGE 等。</p></li><li><p>Set（集合）：</p><p>存储无序且唯一的元素。</p><p>提供对集合进行交集、并集、差集等操作。</p><p>常用命令：SADD、SREM、SMEMBERS、SINTER 等。</p></li><li><p>Sorted Set（有序集合）：</p><p>类似于集合，但每个元素关联一个分数（score）。</p><p>可以按照分数进行排序。</p><p>常用命令：ZADD、ZREM、ZRANGE、ZSCORE 等。</p></li><li><p>Bitmap（位图）：</p><p>存储二进制位的数据结构，支持位运算。</p><p>常用命令：SETBIT、GETBIT、BITOP 等。</p></li><li><p>HyperLogLog：</p><p>用于近似计数的数据结构，估算集合中不重复元素的个数。</p><p>常用命令：PFADD、PFCOUNT、PFMERGE。</p></li><li><p>Geospatial（地理空间索引）：</p><p>存储地理空间信息，如经度、纬度等。</p><p>提供地理位置的计算和查询。</p><p>常用命令：GEOADD、GEODIST、GEORADIUS、GEOHASH 等。</p></li></ol><h3 id="redis-的使用场景有哪些" tabindex="-1"><a class="header-anchor" href="#redis-的使用场景有哪些"><span><span style="color:#fb9b5f;">Redis 的使用场景有哪些？</span></span></a></h3><p>Redis 一般用于<strong>缓存数据</strong>、<strong>实现分布式锁</strong>、<strong>模拟消息队列</strong>、<strong>延迟队列</strong>等场景。</p><h3 id="redis-缓存数据可能会产生哪些问题" tabindex="-1"><a class="header-anchor" href="#redis-缓存数据可能会产生哪些问题"><span><span style="color:#fb9b5f;">Redis 缓存数据可能会产生哪些问题？</span></span></a></h3><p>可能产生的问题：<strong>缓存穿透</strong>、<strong>缓存雪崩</strong>、<strong>缓存击穿</strong>、<strong>双写一致性</strong>、<strong>持久化</strong>、<strong>数据过期</strong>、淘汰策略等（以下面试题也是根据这些问题来展开的）。</p><h3 id="什么是缓存穿透-怎么解决" tabindex="-1"><a class="header-anchor" href="#什么是缓存穿透-怎么解决"><span><span style="color:#fb9b5f;">什么是缓存穿透？怎么解决？</span></span></a></h3><p>缓存穿透是指查询一个在数据库中<strong>一定不存在的数据</strong>，由于没有放置到缓存中，所以每次的请求都会到达数据库，在高并发场景下，这将有可能会导致数据库瞬时的压力过大而导致宕机。</p><p>解决方案一般有两种：</p><ol><li>给查询不到的数据<strong>缓存空值</strong>，并设置短暂的过期时间。</li><li>使用 Redisson 实现的<strong>布隆过滤器</strong>来解决。</li></ol><h3 id="可以介绍一下布隆过滤器吗" tabindex="-1"><a class="header-anchor" href="#可以介绍一下布隆过滤器吗"><span><span style="color:#fb9b5f;">可以介绍一下布隆过滤器吗？</span></span></a></h3><p>布隆过滤器一般是用于<strong>检索一个元素是否在一个集合中</strong>。</p><p>布隆过滤器的底层实现是先初始化一个大的数组，数组中的每个元素存放的是二进制的 0 或 1（初始都为 0）。</p><p>把一个 Key 经过 <strong>3 次 hash</strong> 运算，然后再 <strong>% 数组的长度</strong>，得到的结果作为数据在数组中的下标，再把对应下标中的 0 改为 1。</p><p>这样三个数组的位置就能标明一个 Key 是否存在（查找的过程也是一样的）。</p><p>当然，这也是有缺点的，布隆过滤器会存在一定的误判率，但是可以设置这个误判率，一般不超过 <strong>5%</strong>。</p><p>其实，这个误判率是一定会存在的，不然就需要增加数组的长度，5% 以内的误判率一般项目也可以接受，不至于在高并发场景下压垮数据库。</p><h3 id="什么是缓存击穿-怎么解决" tabindex="-1"><a class="header-anchor" href="#什么是缓存击穿-怎么解决"><span><span style="color:#fb9b5f;">什么是缓存击穿？怎么解决？</span></span></a></h3><p>在高并发的场景下，大量的并发请求同时访问了<strong>同一个热点数据</strong>，恰好该<strong>热点数据已失效</strong>，所以所有的请求都会到达数据库，可能会瞬间耗尽数据库的资源，最终导致数据库宕机。</p><p>解决方案一般有三种：</p><ol><li><p>使用<strong>同步锁</strong>（本地锁）来控制查询数据库的线程，只允许有一个线程去查询数据库，获得数据后存入到缓存中。</p><p>优点：强一致性。</p><p>缺点：</p><ul><li><p>如果是分布式场景下，还是会有多次查询数据库（因为锁对象是<code>this</code>而每个 JVM 都有一个<code>this</code>）。</p></li><li><p>其次，因为使用的是同步锁，所以<strong>对性能会影响</strong>。</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1.查询缓存中是否已存在数据</span>
  <span class="token comment">// 2.查询数据库</span>
  <span class="token comment">// 3.存入到缓存中</span>
<span class="token punctuation">}</span>
</code></pre></div></li></ul></li><li><p>设置热点的 Key 为<strong>逻辑过期配并配合互斥锁</strong>来实现，大概思路如下：</p><ol><li>缓存 Key 时，不给 Key 设置过期时间，但是多添加一个标识过期时间的字段；</li><li>当查询时，从 Redis 中获取数据后，先判断是否过期（未过期则正常返回数据）；</li><li>如果数据已过期，则首先获取互斥锁，然后在开启一个新的线程去同步数据，当前线程正常返回旧的数据，当新线程同步数据完成后，释放锁即可。</li><li>如果在重建缓存的过程中有其它线程来读取数据，发现数据已过期，则需要先获取锁，此时会获取锁失败，则返回旧的数据即可。</li><li>缓存重建完成后，锁也会被释放掉，此时的数据就是最新数据了。</li></ol><p>优点：高可用、性能佳。</p><p>缺点：非强一致性。</p></li><li><p><strong>使用 Redisson 分布式锁来解决</strong>。</p></li></ol><h3 id="什么是缓存雪崩-怎么解决" tabindex="-1"><a class="header-anchor" href="#什么是缓存雪崩-怎么解决"><span><span style="color:#fb9b5f;">什么是缓存雪崩？怎么解决？</span></span></a></h3><p>缓存雪崩是指大量的 Key 使用了<strong>相同的过期时间</strong>，导致缓存在同一时间全部失效，在高并发场景下，所有的请求都会直接到达数据库，可能会导致数据库瞬间压力过大而宕机。</p><p>解决方案一般有两种：</p><ol><li>使用<strong>同步锁或分布式锁</strong>（对性能有影响）。</li><li>给同一类 Key 的过期时间上增加一个随机值，比如 1～5 分钟的<strong>随机时间</strong>，把缓存过期时间重复率降低。</li></ol><h3 id="如何保证-redis-和-mysql-的双写一致性" tabindex="-1"><a class="header-anchor" href="#如何保证-redis-和-mysql-的双写一致性"><span><span style="color:#fb9b5f;">如何保证 Redis 和 MySQL 的双写一致性？</span></span></a></h3><p>未完待续...</p>`,30);function l(d,c){return s(),t("div",null,[o,n(" more "),r])}const m=e(i,[["render",l],["__file","index.html.vue"]]),u=JSON.parse('{"path":"/audition/redis/core/","title":"基础篇","lang":"zh-CN","frontmatter":{"title":"基础篇","icon":"Code","category":"面试题","tag":"面试题","timeline":true,"star":true,"description":"此处是一些 Redis 的高频面试题（持续更新中...）。 基础篇 Redis 中的数据结构有哪些？ Redis 是一种基于内存的数据存储系统，支持多种灵活的数据结构。 以下是 Redis 中主要的数据结构： String（字符串）： 存储字符串值，可包含任意数据，例如文本、二进制数据。 常用命令：SET、GET、INCR、APPEND 等。 Hash...","head":[["meta",{"property":"og:url","content":"https://SuperChenWenjing.github.io/audition/redis/core/"}],["meta",{"property":"og:site_name","content":"陈文景"}],["meta",{"property":"og:title","content":"基础篇"}],["meta",{"property":"og:description","content":"此处是一些 Redis 的高频面试题（持续更新中...）。 基础篇 Redis 中的数据结构有哪些？ Redis 是一种基于内存的数据存储系统，支持多种灵活的数据结构。 以下是 Redis 中主要的数据结构： String（字符串）： 存储字符串值，可包含任意数据，例如文本、二进制数据。 常用命令：SET、GET、INCR、APPEND 等。 Hash..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-08T16:03:07.000Z"}],["meta",{"property":"article:author","content":"陈文景"}],["meta",{"property":"article:tag","content":"面试题"}],["meta",{"property":"article:modified_time","content":"2024-03-08T16:03:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础篇\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-08T16:03:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"陈文景\\",\\"email\\":\\"2646530197@qq.com\\",\\"url\\":\\"https://superchenwenjing.github.io\\"}]}"]],"date":"2024-03-08T16:03:07.000Z"},"headers":[{"level":2,"title":"基础篇","slug":"基础篇","link":"#基础篇","children":[{"level":3,"title":"Redis 中的数据结构有哪些？","slug":"redis-中的数据结构有哪些","link":"#redis-中的数据结构有哪些","children":[]},{"level":3,"title":"Redis 的使用场景有哪些？","slug":"redis-的使用场景有哪些","link":"#redis-的使用场景有哪些","children":[]},{"level":3,"title":"Redis 缓存数据可能会产生哪些问题？","slug":"redis-缓存数据可能会产生哪些问题","link":"#redis-缓存数据可能会产生哪些问题","children":[]},{"level":3,"title":"什么是缓存穿透？怎么解决？","slug":"什么是缓存穿透-怎么解决","link":"#什么是缓存穿透-怎么解决","children":[]},{"level":3,"title":"可以介绍一下布隆过滤器吗？","slug":"可以介绍一下布隆过滤器吗","link":"#可以介绍一下布隆过滤器吗","children":[]},{"level":3,"title":"什么是缓存击穿？怎么解决？","slug":"什么是缓存击穿-怎么解决","link":"#什么是缓存击穿-怎么解决","children":[]},{"level":3,"title":"什么是缓存雪崩？怎么解决？","slug":"什么是缓存雪崩-怎么解决","link":"#什么是缓存雪崩-怎么解决","children":[]},{"level":3,"title":"如何保证 Redis 和 MySQL 的双写一致性？","slug":"如何保证-redis-和-mysql-的双写一致性","link":"#如何保证-redis-和-mysql-的双写一致性","children":[]}]}],"git":{"createdTime":1709913787000,"updatedTime":1709913787000,"contributors":[{"name":"陈文景","email":"2646530197@qq.com","commits":1}]},"readingTime":{"minutes":5.26,"words":1578},"filePathRelative":"audition/redis/core/README.md","localizedDate":"2024年3月8日","excerpt":"<p>此处是一些 Redis 的高频面试题（持续更新中...）。</p>\\n","autoDesc":true}');export{m as comp,u as data};
